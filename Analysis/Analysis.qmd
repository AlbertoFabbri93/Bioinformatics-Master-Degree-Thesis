---
title: "A study on brain metastases from primary breast cancer"
author: "Alberto Fabbri"
format: html
---

::: {.content-hidden}
### Install the necessary packages
:::

```{r}
#| label: setup
#| include: false

# Work with single cell and spatial omics data
library("Seurat")
# Replace this future symbols with others because they conflict with the zeallot package
library (future, exclude = c("%->%", "%<-%"));
`%<--%` = future::`%<-%` ;
`%-->%` = future::`%->%` ;
# Parallelize the computation with several worker processes that will run in their own R session
plan("multisession", workers = 6)
# Unpack multiple values without temporary variables
library("zeallot")
# Sane way to declare file paths
library("here")
# Machine learning library from NanoString
library("InSituType")
# Used for the barplots
library("dittoSeq")
# Used to visualize the raw images from AtoMx
library(EBImage)
# Used to annotate images with multiple plots
library(patchwork)

###### TIDYVERSE ######
# Data manipulation
library("dplyr")
# Create nice plots
library("ggplot2")
# Open Excel files
library("readxl")
# Open CSV files
library("readr")
# Pivot tibbles
library("tidyr")

# Import utility functions
source("Utils.R")

# Import environment variables as global variables
rds_dir <- Sys.getenv("RDS_DIR")
image_dir <- Sys.getenv("IMAGE_DIR")
image_ext <- Sys.getenv("IMAGE_EXT")
```

## General overview of the data

```{r}
#| label: data-overview
#| echo: false

# Cohort of all the patients
breast_cancer_patients <- readRDS(here(rds_dir, "breast_cancer_patients.rds"))
immunofluorescence <- breast_cancer_patients@meta.data %>% select("Mean.PanCK", "Mean.CD45", "Mean.CD68")
cohort <- fastCohorting(immunofluorescence,
  gaussian_transform = TRUE, n_cohorts = 5
)
# check clusters and cohort numbers
table(cohort)

# List of the gene data (1000-plex RNA)
rownames(breast_cancer_patients)
# Create a data frame to store the table
patient_table <- data.frame(
  Patient_ID = character(),
  Serial_Cores = character(),
  Stamps = character(),
  FOVs = character(),
  stringsAsFactors = FALSE
)

# Iterate over each patient
for (patient_id in sort(unique(unlist(breast_cancer_patients$Patient.ID)))) {
  # Subset the data for the current patient
  patient_data <- subset(x = breast_cancer_patients@meta.data, subset = Patient.ID == patient_id)

  # Get the unique serial cores for the current patient
  serial_cores <- unique(patient_data$core_serial)

  # Iterate over each serial core
  for (serial_core_id in serial_cores) {
    # Subset the data for the current serial core
    serial_core_data <- subset(x = patient_data, subset = core_serial == serial_core_id)

    # Get the unique stamps for the current serial core
    stamps <- unique(serial_core_data$stamp)
    
    # Iterate over each stamp
    for (stamp_id in stamps) {
      # Subset the data for the current stamp
      stamp_data <- subset(x = serial_core_data, subset = stamp == stamp_id)

      # Get the unique FOVs for the current stamp
      fovs <- unique(stamp_data$fov)

      # Add a row to the patient table for each FOV
      for (fov_id in fovs) {
        patient_table <- rbind(patient_table, data.frame(
          Patient_ID = patient_id,
          Serial_Cores = serial_core_id,
          Stamps = stamp_id,
          FOVs = fov_id
        ))
      }
    }
  }
}

# Print the patient table
print(patient_table)
# Print all the patients ID
sort(unique(unlist(breast_cancer_patients$Patient.ID)))

# Print all the FOV
breast_cancer_fovs <- sort(unique(unlist(breast_cancer_patients$fov)))

# Print the number of stamps
length(unique(paste(breast_cancer_patients@meta.data$core_serial, breast_cancer_patients@meta.data$stamp)))
```

### Tissue micro array

```{r}
#| label: TMA-info

# List with plots & dataframe to be saved
TMA_info_to_save <- list()
# List with plots & dataframe to be displayed
TMA_info_to_display <- list()

# Information about the patients involved in the study
patient_info <- read_excel(here("Analysis", "metadata", "updatedPACC_Copy of METBRA_patient_v1_now_updated_dec_2022_GOOD_mar_2024_Lanzing.xlsx"))
TMA_info_to_display[["Patient_info"]] <- patient_info

# FOVs & Core serials
LU001FFP03_FOV <- read_excel(here("Analysis", "metadata", "LU001FFP03_FOV.xlsx"))
# Core serials, Patients' ID & Primary Diagnosis
TMA_METBRA_COSMX <- read_excel(
  path = here("Analysis", "metadata", "TMA_METBRA_COSMX Analysis.xlsx"),
  sheet = "TMA_list")
# FOVs & associated primary diagnosis
FOVs_primary_diagnosis <- left_join(
  x = LU001FFP03_FOV,
  y = TMA_METBRA_COSMX,
  by = c("core_serial" = "Full Serial Number"))
# X, Y & Z FOVs positions
tissue_micro_array <- read_csv(gzfile(
  here("Analysis", "flat_files", "LU001FFP03", "LU001FFP03_fov_positions_file.csv.gz")),
  col_types = cols(
  Slide = col_integer(),
  X_mm = col_double(),
  Y_mm = col_double(),
  Z_mm = col_double(),
  ZOffset_mm = col_double(),
  ROI = col_integer(),
  FOV = col_integer(),
  Order = col_integer(),
  Run_Tissue_name = col_character()))
# FOVs, associated primary diagnosis & X, Y, Z positions
FOVs_prim_diag_pos <- left_join(
  x = tissue_micro_array,
  y = FOVs_primary_diagnosis,
  by = c("FOV" = "fov"))
# FOVs, associated primary diagnosis, X, Y positions & quality
FOVs_prim_diag_pos_qual <- FOVs_prim_diag_pos %>%
  dplyr::mutate(Quality = case_when(
    is.na(`Primary Diagnosis`) ~ NA_character_,
    `Primary Diagnosis` != "breast cancer" ~ NA_character_,
    FOV %in% breast_cancer_fovs ~ "good",
    TRUE ~ "bad"
  ))

# Plots shared parameters
square_size <- 5
square_text_size <- 1.6
title <- "TMA LU001FFP03"

# TMA plot with FOVs positions and associated primary diagnosis
LU001FFP03_TMA_primary_diag <- ggplot(FOVs_prim_diag_pos_qual, aes(x = X_mm, y = Y_mm)) +
  geom_point(aes(color = `Primary Diagnosis`), shape = 15, size = square_size) +
  geom_text(aes(label = FOV), size = square_text_size) +
  coord_equal() +
  labs(title = title,
       color = "Primary diagnosis") +
  scale_color_manual(values = c("breast cancer" = "#00B5EE", "lung cancer" = "#E26EF7"),
                     na.translate = TRUE, 
                     na.value = "grey50",
                     breaks = c("breast cancer", "lung cancer"))
LU001FFP03_TMA_primary_diag_name <- paste0("TMA_LU001FFP03_primary_diagnosis_highlighted")
TMA_info_to_save[[LU001FFP03_TMA_primary_diag_name]] <- LU001FFP03_TMA_primary_diag

# TMA plot with FOVs positions and quality of those with primary diagnosis of breast cancer
LU001FFP03_TMA_breast_cancers_stamps_quality <- ggplot(FOVs_prim_diag_pos_qual, aes(x = X_mm, y = Y_mm)) +
  geom_point(aes(color = `Quality`), shape = 15, size = square_size) +
  geom_text(aes(label = FOV), size = square_text_size) +
  coord_equal() +
  labs(title = title,
       color = "Breast cancer\nstamps quality") +
  scale_color_manual(values = c("good" = "#00BB44", "bad" = "#F8766D"),
                     na.translate = TRUE, 
                     na.value = "grey50",
                     breaks = c("good", "bad"))
LU001FFP03_TMA_breast_cancer_stamps_highlighted_name <- paste0("TMA_LU001FFP03_breast_cancer_stamps_quality")
TMA_info_to_save[[LU001FFP03_TMA_breast_cancer_stamps_highlighted_name]] <- LU001FFP03_TMA_breast_cancers_stamps_quality

print(c(TMA_info_to_display, TMA_info_to_save))
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-TMA-info
#| include: false
#| echo: false
#| eval: false

save_plots(TMA_info_to_save, here(image_dir), image_ext)
```

### Read Akoya Data

```{r}
# File path to the Akoya data
file_path <- here("Analysis", "Akoya_spatial_multiplex_immune_cell_data", "Breast cancer",
                  "M1 Breast Full Cores Final + Image", "Results_breast_full_cores.xlsx")

# Read the file with the Akoya data
# The data is in the second sheet, the first row is skipped (the header is on the second row)
# and the columns with useless data are removed
data <- read_excel(file_path, sheet = 2, skip = 1,
                   col_types = c("skip", "skip", "text", "text", "skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))

# Create an empty tibble to store the filtered data
# Only the total cell data is kept
akoya_data <- data %>% slice(0)

# Add only the rows with the total cell count to the tibble
for (i in seq(3, nrow(data), by = 3)) {
  row <- data[i, ]
  akoya_data <- add_row(.data = akoya_data,row)
}

# Rename columns to align with the nomenclaure used in the rest of the analysis
akoya_data <- akoya_data %>% rename(
  "Tumor" = "Pan-CK+/CD4-/CD8-/CD20-/CD68-/FOXP3-",
  "T cell CD4" = "Pan-CK-/CD4+/FOXP3-",
  "T cell regulatory" = "Pan-CK-/CD4+/FOXP3+",
  "T cell CD8" = "Pan-CK-/CD8+",
  "B cell" = "Pan-CK-/CD20+",
  "Macrophage" = "Pan-CK-/CD68+"
)

# Merge the two types of T-cells into a single column
# processed_data <- processed_data %>% mutate(
#   "T-cell" = `T-cell CD4` + `T-cell CD8`
# ) %>% select(-`T-cell CD4`, -`T-cell CD8`)

# Created manually from a schematic of the TMA in METBRA PhenoImager Analysis file
map_TMA_row_column_to_core <- tibble(
  `TMA Row` = c("12", "5", "10", "10", "11", "11", "12", "2", "3", "4", "6", "7", "8", "9", "9"),
  `TMA Column` = c("E", "F", "E", "F", "E", "F", "F", "F", "F", "F", "F", "F", "E", "E", "F"),
  core = c("M6", "M4", "M7", "M2", "M7", "M1", "M1", "M6", "M5", "M5", "M4", "M3", "M8", "M8", "M2")
)

# Merge the data data about the cores with the Akoya data and make it the first column
akoya_data <- akoya_data %>% left_join(map_TMA_row_column_to_core, by = c("TMA Row", "TMA Column")) %>%
  select(all_of(names(map_TMA_row_column_to_core)), everything())

# Subset the TMA_METBRA_COSMX data frame to only the useful columns
TMA_METBRA_COSMX_subset <- TMA_METBRA_COSMX[, c("Full Serial Number", "Patient ID")]

# Merge the Patient IDs with the Akoya data and make it the first column
akoya_data <- akoya_data %>% left_join(TMA_METBRA_COSMX_subset, by = join_by("core" == "Full Serial Number")) %>%
  select(
    `Patient ID`, 
    everything()
  ) %>%
  arrange(`core`)

# Remove columns that were only used for merging
akoya_data <- akoya_data %>%
  select(-`TMA Column`, -`TMA Row`)

# Sum the data for each patient
akoya_by_patient <- akoya_data %>%
  select(-core) %>%
  group_by(`Patient ID`) %>%
  summarise(across(where(is.numeric), \(x) sum(x, na.rm = TRUE)))

# Print the tibbles
print(list(akoya_data, akoya_by_patient))
```


## Clustering per patient

```{r}
#| label: merged-data

patients_rna_data <- list()
```

### Patient 1

```{r}
#| label: analyze-patient-1

# Steps with all the data
patient_1_all_data <- extract_patient_data(breast_cancer_patients, "1")
patient_1_all_data <- analyze_proteins(patient_1_all_data)
patient_1_plots <- generate_proteins_plots(patient_1_all_data, "proteins")

# Red blood cells removed
patient_1_rbc_removed <- remove_clusters(patient_1_all_data, "protein_clusters", c(5))
patient_1_IST_semisup <- run_IST_semisup_extract_data(patient_1_rbc_removed, "Nanostring")
# Add cluster to the metadata
patient_1_rbc_removed$InSituType_semisup_clusters <- patient_1_IST_semisup$clust

# RNA data only
patient_1_data <- extract_patient_rna_data(patient_1_rbc_removed, "Nanostring")
patient_1_data <- normalize_cluster_data(patient_1_data, "RNA")
patient_1_plots <- c(patient_1_plots, generate_umap(patient_1_data, "RNA_clusters", "umap_RNA"))
patient_1_plots <- c(patient_1_plots, generate_dyn_text_heatmap(patient_1_data, "RNA_clusters", "RNA"))

# Annotations
patient_1_data$RNA_clusters_annotated <- case_match(
  patient_1_data$RNA_clusters,
  c("0", "1", "2", "3") ~ "Tumor",
  "4" ~ "Fibroblast",
  "5" ~ "Macrophage",
  "6" ~ "T cell",
  "7" ~ "Fibroblast"
)
patient_1_plots <- c(patient_1_plots, generate_umap(patient_1_data, "InSituType_semisup_clusters", "umap_RNA"))
patient_1_plots <- c(patient_1_plots, generate_dyn_text_heatmap(patient_1_data, "InSituType_semisup_clusters", "RNA"))
InSituType_color_lookup_table_1 <- generate_colors_lookup_table(
    patient_1_data,
    "InSituType_semisup_clusters",
    known_clusters_colors)
patient_1_plots <- c(
    patient_1_plots,
    generate_flightpath(patient_1_IST_semisup, InSituType_color_lookup_table_1, "1"))
patient_1_plots <- c(patient_1_plots, generate_rna_plots(patient_1_data, "RNA", "RNA_clusters_annotated"))
patient_1_data$InSituType_semisup_clusters_annotated <- case_match(
  patient_1_data$InSituType_semisup_clusters,
  c("a", "b", "c", "d", "e", "f") ~ "Tumor",
  "g" ~ "Endothelial",
  .default = unname(patient_1_data$InSituType_semisup_clusters)
)

InSituType_color_lookup_table <- generate_colors_lookup_table(patient_1_data, "InSituType_semisup_clusters_annotated", known_clusters_colors)
patient_1_plots <- c(patient_1_plots, generate_clustering_plots(patient_1_data, "InSituType_semisup_clusters_annotated",
    cluster_assay = "RNA", 
    cluster_reduction = "umap_RNA",
    create_heatmap = FALSE,
    cluster_name = "InSituType Semisupervised Clusters Annotated",
    color_lookup_table = InSituType_color_lookup_table))
patient_1_plots <- c(patient_1_plots, generate_comparison_plots(patient_1_data))

# Cleanup and printing
patients_rna_data[[1]] <- patient_1_data
print(patient_1_plots)
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-patient-1
#| include: false
#| echo: false
#| eval: false

save_plots(patient_1_plots, get_patient_dir_img("1"), image_ext)
```

### Patient 2

```{r}
#| label: analyze-patient-2

# Steps with all the data
patient_2_all_data <- extract_patient_data(breast_cancer_patients, "2")
patient_2_all_data <- analyze_proteins(patient_2_all_data)
patient_2_plots <- generate_proteins_plots(patient_2_all_data, "proteins")

# Red blood cells removed
patient_2_rbc_removed <- remove_clusters(patient_2_all_data, "protein_clusters", c(6))
patient_2_IST_semisup <- run_IST_semisup_extract_data(patient_2_rbc_removed, "Nanostring")
# Add cluster to the metadata
patient_2_rbc_removed$InSituType_semisup_clusters <- patient_2_IST_semisup$clust

# RNA data only
patient_2_data <- extract_patient_rna_data(patient_2_rbc_removed, "Nanostring")
patient_2_data <- normalize_cluster_data(patient_2_data, "RNA")

# Annotations
patient_2_data$RNA_clusters_annotated <- case_match(
  patient_2_data$RNA_clusters,
  c("0", "1", "2") ~ "Tumor",
  "3" ~ "Fibroblast",
  "4" ~ "Macrophage",
  "5" ~ "Endothelial",
  "6" ~ "T cell"
)
patient_2_data$InSituType_semisup_clusters_annotated <- case_match(
  patient_2_data$InSituType_semisup_clusters,
  c("a", "b") ~ "Tumor",
  "c" ~ "Dendritic cell",
  c("d", "e") ~ "Fibroblast",
  .default = unname(patient_2_data$InSituType_semisup_clusters)
)

patient_2_plots <- c(patient_2_plots, generate_rna_plots(patient_2_data, "RNA", "RNA_clusters_annotated"))
patient_2_plots <- c(patient_2_plots, generate_IST_plots(patient_2_data, "RNA", patient_2_IST_semisup))
patient_2_plots <- c(patient_2_plots, generate_comparison_plots(patient_2_data))

# Cleanup and printing
patients_rna_data[[2]] <- patient_2_data
print(patient_2_plots)
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-patient-2
#| include: false
#| echo: false
#| eval: false

save_plots(patient_2_plots, get_patient_dir_img("2"), image_ext)
```

### Patient 3

```{r}
#| label: analyze-patient-3

# Steps with all the data
patient_3_all_data <- extract_patient_data(breast_cancer_patients, "3")
patient_3_all_data <- analyze_proteins(patient_3_all_data)
patient_3_plots <- generate_proteins_plots(patient_3_all_data, "proteins")
patient_3_IST_semisup <- run_IST_semisup_extract_data(patient_3_all_data, "Nanostring")
# Add cluster to the metadata
patient_3_all_data$InSituType_semisup_clusters <- patient_3_IST_semisup$clust

# RNA data only
patient_3_data <- extract_patient_rna_data(patient_3_all_data, "Nanostring")
patient_3_data <- normalize_cluster_data(patient_3_data, "RNA")

# Annotations
patient_3_data$RNA_clusters_annotated <- case_match(
  patient_3_data$RNA_clusters,
  c("0", "2", "3") ~ "Tumor",
  "1" ~ "Macrophage",
  c("4", "7") ~ "Fibroblast",
  "5" ~ "Fibroblast/Oligodendrocyte",
  "6" ~ "Endothelial"
)
patient_3_data$InSituType_semisup_clusters_annotated <- case_match(
  patient_3_data$InSituType_semisup_clusters,
  c("a", "c", "d", "e", "g") ~ "Tumor",
  c("b", "f") ~ "Fibroblast",
  .default = unname(patient_3_data$InSituType_semisup_clusters)
)

patient_3_plots <- c(patient_3_plots, generate_rna_plots(patient_3_data, "RNA", "RNA_clusters_annotated"))
patient_3_plots <- c(patient_3_plots, generate_IST_plots(patient_3_data, "RNA", patient_3_IST_semisup))
patient_3_plots <- c(patient_3_plots, generate_comparison_plots(patient_3_data))

# Cleanup and printing
patients_rna_data[[3]] <- patient_3_data
print(patient_3_plots)
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-patient-3
#| include: false
#| echo: false
#| eval: false

save_plots(patient_3_plots, get_patient_dir_img("3"), image_ext)
```

### Patient 4

```{r}
#| label: analyze-patient-4

# Steps with all the data
patient_4_all_data <- extract_patient_data(breast_cancer_patients, "4")
patient_4_all_data <- analyze_proteins(patient_4_all_data)
patient_4_plots <- generate_proteins_plots(patient_4_all_data, "proteins")

# Red blood cells removed
patient_4_rbc_removed <- remove_clusters(patient_4_all_data, "protein_clusters", c(3))
patient_4_IST_semisup <- run_IST_semisup_extract_data(patient_4_rbc_removed, "Nanostring")
# Add cluster to the metadata
patient_4_rbc_removed$InSituType_semisup_clusters <- patient_4_IST_semisup$clust

# RNA data only
patient_4_data <- extract_patient_rna_data(patient_4_rbc_removed, "Nanostring")
patient_4_data <- normalize_cluster_data(patient_4_data, "RNA")

# Annotations
patient_4_data$RNA_clusters_annotated <- case_match(
  patient_4_data$RNA_clusters,
  c("0", "1", "2", "3") ~ "Tumor",
  "4" ~ "Fibroblast",
  "5" ~ "Macrophage",
  "6" ~ "T cell/Endothelial"
)
patient_4_data$InSituType_semisup_clusters_annotated <- case_match(
  patient_4_data$InSituType_semisup_clusters,
  c("a", "c") ~ "Tumor",
  "b" ~ "Dendritic cell",
  c("d", "e") ~ "Fibroblast",
  .default = unname(patient_4_data$InSituType_semisup_clusters)
)
patient_4_plots <- c(patient_4_plots, generate_rna_plots(patient_4_data, "RNA", "RNA_clusters_annotated"))
patient_4_plots <- c(patient_4_plots, generate_IST_plots(patient_4_data, "RNA", patient_4_IST_semisup))
patient_4_plots <- c(patient_4_plots, generate_comparison_plots(patient_4_data))

# Cleanup and printing
patients_rna_data[[4]] <- patient_4_data
print(patient_4_plots)
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-patient-4
#| include: false
#| echo: false
#| eval: false

save_plots(patient_4_plots, get_patient_dir_img("4"), image_ext)
```

### Patient 5

```{r}
#| label: analyze-patient-5

# Steps with all the data
patient_5_all_data <- extract_patient_data(breast_cancer_patients, "5")
patient_5_all_data <- analyze_proteins(patient_5_all_data)
patient_5_plots <- generate_proteins_plots(patient_5_all_data, "proteins")
patient_5_IST_semisup <- run_IST_semisup_extract_data(patient_5_all_data, "Nanostring")
# Add cluster to the metadata
patient_5_all_data$InSituType_semisup_clusters <- patient_5_IST_semisup$clust

# RNA data only
patient_5_data <- extract_patient_rna_data(patient_5_all_data, "Nanostring")
patient_5_data <- normalize_cluster_data(patient_5_data, "RNA")

# Annotations
patient_5_data$RNA_clusters_annotated <- case_match(
  patient_5_data$RNA_clusters,
  c("0", "1") ~ "Tumor",
  c("2", "5") ~ "Dendritic cell",
  "3" ~ "Fibroblast",
  "4" ~ "Macrophage",
  "6" ~ "Endothelial/Fibroblast",
  "7" ~ "T cell/Dendritic cell",
  "8" ~ "T cell",
)
patient_5_data$InSituType_semisup_clusters_annotated <- case_match(
  patient_5_data$InSituType_semisup_clusters,
  c("a", "c", "d", "g") ~ "Tumor",
  c("b", "e") ~ "T cell/Dendritic cell",
  "f" ~ "Fibroblast/Endothelial",
  .default = unname(patient_5_data$InSituType_semisup_clusters)
)

patient_5_plots <- c(patient_5_plots, generate_rna_plots(patient_5_data, "RNA", "RNA_clusters_annotated"))
patient_5_plots <- c(patient_5_plots, generate_IST_plots(patient_5_data, "RNA", patient_5_IST_semisup))
patient_5_plots <- c(patient_5_plots, generate_comparison_plots(patient_5_data))

# Cleanup and printing
patients_rna_data[[5]] <- patient_5_data
print(patient_5_plots)
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-patient-5
#| include: false
#| echo: false
#| eval: false

save_plots(patient_5_plots, get_patient_dir_img("5"), image_ext)
```

### Patient 6

```{r}
#| label: analyze-patient-6

# Steps with all the data
patient_6_all_data <- extract_patient_data(breast_cancer_patients, "6")
patient_6_all_data <- analyze_proteins(patient_6_all_data)
patient_6_plots <- generate_proteins_plots(patient_6_all_data, "proteins")
patient_6_IST_semisup <- run_IST_semisup_extract_data(patient_6_all_data, "Nanostring")
# Add cluster to the metadata
patient_6_all_data$InSituType_semisup_clusters <- patient_6_IST_semisup$clust

# RNA data only
patient_6_data <- extract_patient_rna_data(patient_6_all_data, "Nanostring")
patient_6_data <- normalize_cluster_data(patient_6_data, "RNA")

# Annotations
patient_6_data$RNA_clusters_annotated <- case_match(
  patient_6_data$RNA_clusters,
  c("0", "1", "2", "4") ~ "Tumor",
  "3" ~ "Fibroblasts/Endothelial",
  "5" ~ "Macrophage",
)
patient_6_data$InSituType_semisup_clusters_annotated <- case_match(
  patient_6_data$InSituType_semisup_clusters,
  c("a", "b", "c", "d") ~ "Tumor",
  .default = unname(patient_6_data$InSituType_semisup_clusters)
)

patient_6_plots <- c(patient_6_plots, generate_rna_plots(patient_6_data, "RNA", "RNA_clusters_annotated"))
patient_6_plots <- c(patient_6_plots, generate_IST_plots(patient_6_data, "RNA", patient_6_IST_semisup))
patient_6_plots <- c(patient_6_plots, generate_comparison_plots(patient_6_data))

# Cleanup and printing
patients_rna_data[[6]] <- patient_6_data
print(patient_6_plots)
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-patient-6
#| include: false
#| echo: false
#| eval: false

save_plots(patient_6_plots, get_patient_dir_img("6"), image_ext)
```

### Patient 7

```{r}
#| label: analyze-patient-7

# Steps with all the data
patient_7_all_data <- extract_patient_data(breast_cancer_patients, "7")
patient_7_all_data <- analyze_proteins(patient_7_all_data)
patient_7_plots <- generate_proteins_plots(patient_7_all_data, "proteins")

# Red blood cells removed
patient_7_rbc_removed <- remove_clusters(patient_7_all_data, "protein_clusters", c(7))
patient_7_IST_semisup <- run_IST_semisup_extract_data(patient_7_rbc_removed, "Nanostring")
# Add cluster to the metadata
patient_7_rbc_removed$InSituType_semisup_clusters <- patient_7_IST_semisup$clust

# RNA data only
patient_7_data <- extract_patient_rna_data(patient_7_rbc_removed, "Nanostring")
patient_7_data <- normalize_cluster_data(patient_7_data, "RNA")

# Annotations
patient_7_data$RNA_clusters_annotated <- case_match(
  patient_7_data$RNA_clusters,
  c("0", "1", "2", "3") ~ "Tumor",
  "4" ~ "T cell",
  "5" ~ "Macrophage/Monocyte",
  "6" ~ "Macrophage/Monocyte",
  "7" ~ "Fibroblast/Endothelial",
  "8" ~ "Fibroblast"
)
patient_7_data$InSituType_semisup_clusters_annotated <- case_match(
  patient_7_data$InSituType_semisup_clusters,
  c("a", "b", "c", "d") ~ "Tumor",
  "e" ~ "T cell/Dendritic cell/Endothelial",
  .default = unname(patient_7_data$InSituType_semisup_clusters)
)

patient_7_plots <- c(patient_7_plots, generate_rna_plots(patient_7_data, "RNA", "RNA_clusters_annotated"))
patient_7_plots <- c(patient_7_plots, generate_IST_plots(patient_7_data, "RNA", patient_7_IST_semisup))
patient_7_plots <- c(patient_7_plots, generate_comparison_plots(patient_7_data))

# Cleanup and printing
patients_rna_data[[7]] <- patient_7_data
print(patient_7_plots)
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-patient-7
#| include: false
#| echo: false
#| eval: false

save_plots(patient_7_plots, get_patient_dir_img("7"), image_ext)
```

## Comparing patients

```{r}
#| label: compare-patients

# Save plots comparing patients in this subfolder
compare_patients_subfolder <- here(image_dir, "Compare_patients")
compare_patients_to_save <- list()

# Create folder for the plots id it does not exist
if (!dir.exists(compare_patients_subfolder)) {
  dir.create(compare_patients_subfolder, recursive = TRUE)
}

# Merge all the Seurat objects together
combined_patients <- patients_rna_data[[1]]
combined_patients <- RenameCells(combined_patients, add.cell.id = "Patient_1")
for (i in 2:length(patients_rna_data)) {
  # Provide a unique identifier for each object
  seurat_obj <- RenameCells(patients_rna_data[[i]], add.cell.id = paste0("Patient_", i))
  combined_patients <- merge(combined_patients, y = seurat_obj, merge.data = TRUE)
}

patient_id_label <- "Patient ID"
per_cells_label <- "Percent of cells"
cell_types_label <- "Cell Types"

barplot_IST_ss_var = "InSituType_semisup_clusters_annotated"
barplot_IST_ss_color_lookup_table <- generate_colors_lookup_table(combined_patients, barplot_IST_ss_var, known_clusters_colors)
# Plot a barplot comparing the InSituTypeID clusters of all patients
IST_ss_clusters_all_patients <- dittoBarPlot(
    object = combined_patients,
    var = barplot_IST_ss_var,
    group.by = "Patient.ID",
    color.panel = barplot_IST_ss_color_lookup_table) + 
  labs(title = "Proportion of cells according to InSituType clustering",
       x = patient_id_label,
       y = per_cells_label,
       fill = cell_types_label) +
  scale_fill_manual(values = barplot_IST_ss_color_lookup_table) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  guides(fill = guide_legend(ncol = 2, byrow = TRUE))
compare_patients_to_save[["InSituType_annotated_clusters_all_patients_barplot"]] <- IST_ss_clusters_all_patients

barplot_RNA_ann_var = "RNA_clusters_annotated"
barplot_RNA_ann_color_lookup_table <- generate_colors_lookup_table(combined_patients, barplot_RNA_ann_var, known_clusters_colors)
RNA_ann_clusters_all_patients <- dittoBarPlot(
    object = combined_patients,
    var = barplot_RNA_ann_var,
    group.by = "Patient.ID",
    color.panel = barplot_RNA_ann_color_lookup_table) +
  labs(title = "Proportion of cells according to Louvain clustering",
       x = patient_id_label,
       y = per_cells_label,
       fill = cell_types_label) +
  scale_fill_manual(values = barplot_RNA_ann_color_lookup_table) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  guides(fill = guide_legend(byrow = TRUE))
compare_patients_to_save[["RNA_annotated_clusters_all_patients_barplot"]] <- RNA_ann_clusters_all_patients

# Pivot the table to print it with ggplot
akoya_by_patient_long <- akoya_by_patient %>%
  pivot_longer(cols = -c(`Patient ID`, `Total Cells`), 
               names_to = "Cells Type", 
               values_to = "Cells Quantity")

# Calculate the proportion of each value relative to "Total cells"
akoya_by_patient_long <- akoya_by_patient_long %>%
  mutate(`Cell Quantity Proportion` = `Cells Quantity` / `Total Cells`)

barplot_akoya_color_lookup_table <- generate_colors_lookup_table(akoya_by_patient_long, "Cells Type", known_clusters_colors)
akoya_all_patients <- ggplot(akoya_by_patient_long,
                             aes(x = factor(`Patient ID`), y = `Cell Quantity Proportion`, fill = `Cells Type`)) +
  geom_bar(stat = "identity") +
  labs(title = "Proportion of cells according to Akoya data",
       x = patient_id_label,
       y = per_cells_label,
       fill = cell_types_label) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  scale_fill_manual(values = barplot_akoya_color_lookup_table)
compare_patients_to_save[["Akoya_all_patients_barplot"]] <- akoya_all_patients

print(compare_patients_to_save)
```

::: {.content-hidden}
### Save plots
:::

```{r}
#| label: save-plots-compare-patients
#| include: false
#| echo: false
#| eval: false

save_plots(compare_patients_to_save, compare_patients_subfolder, image_ext)
```
