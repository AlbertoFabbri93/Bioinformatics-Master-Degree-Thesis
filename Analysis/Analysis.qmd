---
title: "A study on brain metastases from primary breast cancer"
author: "Alberto Fabbri"
format: html
editor_options: 
  chunk_output_type: inline
---

# Brain metastaes from primary breast cancer

This study aims to investigate the immune microenvironment of brain metastases from primary breast cancer. The analysis is performed on NanoString data from 7 patients.

## Set up the environment

### Packages

This analysis uses `renv` to manage the dependencies. `renv` is a normal R package that can be installed with:

`install.packages("renv")`

Once `renv` is installed it can be used to install the necessary packages by running the following code:

`renv::restore()`

`renv` will then proceed to install all the packages specified in the `renv.lock` file.

**Do not update the version of the packages if not absolutely necessary.**

If some packages have been update, run `renv::snapshot()` to update the `renv.lock` file.

### Quarto

To run this file it is necessary to have `quarto` installed. `quarto` is a software used to create reproducible documents that embed code. It can be installed by downloading it from the official website:

[https://quarto.org]

::: {.content-hidden}
### Load the necessary packages
:::

```{r}
#| label: setup
#| include: false

# Work with single cell and spatial omics data
library("Seurat")

# Do not import these future symbols because they conflict with the zeallot package
library (future, exclude = c("%->%", "%<-%"));
# Parallelize the computation with several worker processes that will run in their own R session
plan("multisession", workers = 6)
# Set the maximum size of the future globals
options(future.globals.maxSize = 6.5 * 2^30)
# Ensure proper random number seeding globally
options(future.seed = TRUE)

###### TIDYVERSE ######
# Data manipulation
library("dplyr")
# Create nice plots
library("ggplot2")
# Open Excel files
library("readxl")
# Open CSV files
library("readr")
# Better dataframes
library("tibble")
# Pivot tibbles
library("tidyr")

# Unpack multiple values without temporary variables
library("zeallot")
# Add interpreted string literals
library("glue")
# Sane way to declare file paths
library("here")
# Machine learning library from NanoString
library("InSituType")
# Used for the barplots
library("dittoSeq")
# Used to visualize the raw images from AtoMx
library("EBImage")
# For faster estimation when using SCTransform
library("glmGamPoi")
# For fast Wilcoxon rank sum test
library("presto")
# Combine multidimensional arrays into a single array
library("abind")
# Sparse and dense matrix classes and methods
library("Matrix")
# Analysis of cell-cell communication
library("CellChat")

## PLOTTING
# Used to annotate images with multiple plots
library("patchwork")
# Used to arrange plots in a common grid
library("ggpubr")
# Extension of ggplot2 supporting relational data structures such as networks, graphs, and trees
library("ggraph")
# Used to plot the cluster tree created by running FindClusters at several resolutions
library("clustree")
# Add more layout options to ggplot
library("ggforce")
# Additional color palettes
library("RColorBrewer")
library("pals")

## GENE SET ENRICHMENT ANALYSIS
# Used to perform gene set enrichment analysis
library("clusterProfiler")
# Database with the gene information
library("org.Hs.eg.db")
# List all supported types
keytypes(org.Hs.eg.db)

# Make every conflict trigger an error
library("conflicted")

# Import custom written functions
source_files_dir <- ("Analysis")
source(here(source_files_dir, "Utils.R"))
source(here(source_files_dir, "Plotting.R"))
source(here(source_files_dir, "Color_palettes.R"))
source(here(source_files_dir, "Reference_profiles.R"))

## DECLARE GLOBAL VARIABLES
# Import environment variables as global variables
# Do not rename these variables as they are declared in Utils.R as well
objects_dir <- Sys.getenv("OBJECTS_DIR")
images_dir <- Sys.getenv("IMAGES_DIR")
images_ext <- Sys.getenv("IMAGES_EXT")
```

## Tidy Seurat object

### Separate assays

The NanoString data is stored in a single assay. The data is divided into three groups: gene expression, negative probes, and system control. The system control and negative probes are not used in the downstream analysis. The gene expression data is moved to a new assay called "RNA". The system control and negative probes are moved to new assays called "SystemControl" and "NegativeProbes", respectively. The metadata is cleaned by removing unnecessary columns and renaming others. The images are copied from the original Seurat object to a new one. The assay name in the images is updated to match the new assay name.

```{r}
#| label: load-cleaned-object

# Load cleaned object from memory
breast_cancer_patients <- readRDS(here(objects_dir, "breast_cancer_patients.rds"))
```

```{r}
#| label: create-clenaed-object
#| eval: false

# Load the original Seurat object
breast_cancer_patients_mixed_features <- readRDS(here(objects_dir, "breast.cancer.patients.original.rds"))

tidy_seurat_object_assay <- function(seurat_object_mixed_features, assay_name) {

  assay <- seurat_object_mixed_features[[assay_name]]
  
  # Extract features for the "Gene", "Negative Probes" and "System Control" assays
  system_control_features <- grep("^SystemControl", rownames(assay), value = TRUE)
  negative_probes_features <- grep("^Negative", rownames(assay), value = TRUE)
  gene_features <- dplyr::setdiff(rownames(assay), c(system_control_features, negative_probes_features))
  
  # Subset the count data for the various groups of features
  system_control_counts <- assay$counts[system_control_features, ]
  negative_probes_counts <- assay$counts[negative_probes_features, ]
  gene_counts <- assay$counts[gene_features, ]
  
  # Create new Assay objects with the respective features
  system_control_assay <- CreateAssay5Object(counts = system_control_counts)
  negative_probes_assay <- CreateAssay5Object(counts = negative_probes_counts)
  gene_assay <- CreateAssay5Object(counts = gene_counts)
  
  # Assay names
  sytem_control_assay_name <- "SystemControl"
  negative_probes_assay_name <- "NegativeProbes"
  gene_assay_name <- "RNA"
  
  # Set appropriate keys for the new assays
  system_control_assay@key <- paste0(sytem_control_assay_name, "_")
  negative_probes_assay@key <- paste0(negative_probes_assay_name, "_")
  gene_assay@key <- paste0(gene_assay_name, "_")
  
  # Create a new Seurat object
  seurat_object_cleaned_features <- CreateSeuratObject(counts = gene_assay)
  seurat_object_cleaned_features[["SystemControl"]] <- system_control_assay
  seurat_object_cleaned_features[["NegativeProbes"]] <- negative_probes_assay
  
  original_metadata <- seurat_object_mixed_features@meta.data
  
  # Specify the metadata columns to exclude
  exclude_cols <- c(
    "orig.ident",
    "nCount_Nanostring",
    "nFeature_Nanostring",
    "nn_b326beb0.2706.4f9e.a165.44afc025b72e_1_cluster_cluster_7a2d0841.7221.45b3.be66.f38ce260c6aa_1",
    "RNA_nbclust_419c19f2.965d.4b31.822e.6eba63b75b54_1_clusters",
    "RNA_nbclust_419c19f2.965d.4b31.822e.6eba63b75b54_1_posterior_probability",
    "cell",
    "nCount_RNA",
    "nFeature_RNA",
    "nCount_negprobes",
    "nFeature_negprobes",
    "Panel",
    "cellSegmentationSetId",
    "cellSegmentationSetName")

  # Remove the specified columns
  filtered_metadata <- original_metadata[, !(colnames(original_metadata) %in% exclude_cols)]
  
  # Rename one metadata column
  colnames(filtered_metadata)[which(colnames(filtered_metadata) == "cell_id")] <- "full_cell_ID"

  # Copy the metadata from the original Seurat object
  seurat_object_cleaned_features <- AddMetaData(object = seurat_object_cleaned_features, metadata = filtered_metadata)
  
  # Copy the images from the original Seurat object
  seurat_object_cleaned_features@images <- seurat_object_mixed_features@images
  # Replace the assay name with the new one
  for (image_key in names(seurat_object_cleaned_features@images)) {
    seurat_object_cleaned_features@images[[image_key]]@assay <- gene_assay_name
  }

  return(seurat_object_cleaned_features)
}

# Separate the assays in the Seurat object
breast_cancer_patients <- tidy_seurat_object_assay(breast_cancer_patients_mixed_features, "Nanostring")

# Save the cleaned object
saveRDS(breast_cancer_patients, here(objects_dir, "breast_cancer_patients.rds"))
```

### Filter out anomalous cells

```{r}
#| label: load-filtered-cells-object

# Load filtered cells object from memory
breast_cancer_patients_filt_cells <- readRDS(here(objects_dir, "breast_cancer_patients_filt_cells.rds"))
```

```{r}
#| label: create-filtered-cells-object
#| eval: false

# Read csv file with cells to remove from Seurat object
cells_to_remove <- read_csv(
  here("Analysis", "metadata", "rbc_filtered_out.csv"),
  col_types = cols("Cell.ID" = "c"))

# Remove the cells from the Seurat object
breast_cancer_patients_filt_cells <- subset(breast_cancer_patients, cells = cells_to_remove$Cell.ID)

# Save the filtered cells object
saveRDS(breast_cancer_patients_filt_cells, here(objects_dir, "breast_cancer_patients_filt_cells.rds"))
```

## Quality assurance

```{r}
#| label: qa

# Check if there are mitochondrial genes
mt_gene_count <- sum(grepl("^MT-", rownames(breast_cancer_patients_filt_cells[["RNA"]])))
if (mt_gene_count > 0) {
  cat("TRUE. Number of mitochondrial genes:", mt_gene_count)
} else {
  cat("FALSE. No mitochondrial genes found.")
}
```

## Insitutype Clustering

The clustering performed by Insitutype  uses the raw counts, therefore it is useless to use the integrated data because Seurat does not provide an adjusted count matrix.

```{r}
#| label: ins-metadata-columns

# Name of the column with the raw insitutype clusters
raw_insitutype_col_name <- "patients_ist_semisup_clusters"
# Name of the metadata column with the annotated insitutype clusters
ann_insitutype_col_name <- "patients_ist_semisup_clusters_ann"
```

### Computation

```{r}
#| label: insitutype-read-from-drive

# Read the Insitutype data from the drive
breast_cancer_patients_analyze <- readRDS(here(objects_dir, "breast_cancer_patients_analyze.rds"))
patients_ist_semisup <- readRDS(here(objects_dir, "patients_ist_semisup.rds"))
```

```{r}
#| label: insitutype-per-patient
#| eval: false

# Create a new Seurat object identical to filt cells
breast_cancer_patients_analyze <- breast_cancer_patients_filt_cells
# Arrays to split
assays_to_split <- c("RNA", "NegativeProbes", "SystemControl")
# Split the arrays
for (assay in assays_to_split) {
  breast_cancer_patients_analyze[[assay]] <- split(
    breast_cancer_patients_analyze[[assay]],
    f = breast_cancer_patients_analyze$Patient.ID)
}
# Set Patient.ID as the identity
Idents(breast_cancer_patients_analyze) <- "Patient.ID"

# Create a list to store the results of the insitutype clustering per patient
patients_ist_semisup <- list()
# Insitutype clustering - Loop over every patient
for (patient_id in unique(breast_cancer_patients_analyze$Patient.ID)) {

  # Print the patient ID
  print(glue("Analysis of patient {patient_id}"))
  # Compose string of count layer patient
  count_layer_patient <- paste0("counts.", patient_id)
  # Extract the count data for the selected patient
  patient_rna_counts <- LayerData(
    breast_cancer_patients_analyze,
    assay = "RNA",
    layer = count_layer_patient) %>%
  as.matrix() %>%
  t()
  
  # Extract the negative probes for the selected patient
  patient_avg_neg_probes <- LayerData(
    breast_cancer_patients_analyze,
    assay = "NegativeProbes",
    layer = count_layer_patient) %>%
  as.matrix() %>%
  t() %>%
  Matrix::rowMeans()
  
  # Features to be used for the cohorting
  features <- c("Mean.PanCK", "Mean.CD45", "Mean.CD68")
  patient_immunofluorescence <- FetchData(
  object = breast_cancer_patients_analyze, 
  vars = features, # Specify which metadata columns to extract
  cells = WhichCells(breast_cancer_patients_analyze, idents = patient_id)
  )
  
  # Cohort of the patient
  # fastCohorting is stochastic, so set the seed for reproducibility
  set.seed(42);
  # "Gaussian_transform = TRUE" maps variables to gaussians in order to place dramatically different variables on the same scale
  patient_cohort <- fastCohorting(
    patient_immunofluorescence,
    gaussian_transform = TRUE)
  # check clusters and cohort numbers
  table(patient_cohort)
  
  clusts_search_space = 1:8
  set.seed(6)
  clusts_num <- chooseClusterNumber(
    counts = patient_rna_counts,
    neg = patient_avg_neg_probes,
    fixed_profiles = io_profiles,
    n_clusts = clusts_search_space)
  
  # Semi-supervised learning with insitutype and reference profiles
  # Insitutype needs integers, if given floating point numbers it fails with misleading errors
  patients_ist_semisup[[patient_id]] <- insitutype(
    x = patient_rna_counts,
    neg = patient_avg_neg_probes,
    cohort = patient_cohort,
    reference_profiles = io_profiles,
    
    # Enter your own per-cell background estimates here if you
    # have them; otherwise insitutype will use the negprobes to
    # estimate background for you.
    bg = NULL,
    # Group the cells the do not correspond to any type in the reference matrix
    n_clusts = clusts_num$best_clust_number,
    # reference_profiles = updatedprofiles$updated_profiles,
    # Update the reference profile based on the current data
    update_reference_profiles = FALSE,
    # choosing inadvisably low numbers to speed the vignette; using the defaults
    # in recommended.
    # This is the number of cells used in each phase, because of random sampling
    n_phase1 = 200,
    n_phase2 = 500,
    n_phase3 = 1000,
    n_starts = 6,
    max_iters = 12
  )
}

# Save insitutype list
saveRDS(patients_ist_semisup, here(objects_dir, "patients_ist_semisup.rds"))

# Join Layers
for (assay in assays_to_split) {
  breast_cancer_patients_analyze <- JoinLayers(breast_cancer_patients_analyze, assay = assay, layers = "counts")
}

# Merge patient insitutype clusters
merged_ist_results <- c()
for (i in 1:length(patients_ist_semisup)) {
  merged_ist_results <- c(merged_ist_results, patients_ist_semisup[[i]]$clust)
}
# Add the raw insitutype clusters to the Seurat object
breast_cancer_patients_analyze <- AddMetaData(
  object = breast_cancer_patients_analyze,
  metadata = merged_ist_results,
  col.name = raw_insitutype_col_name)
print(get_cluster_info(breast_cancer_patients_analyze, raw_insitutype_col_name))

# Rename unknown clusters to tumor
breast_cancer_patients_analyze@meta.data %<>%
  mutate(
    "{ann_insitutype_col_name}" := case_match(
      .data[[raw_insitutype_col_name]],
      c("a", "b", "c", "d", "e", "f", "g") ~ "Tumor",
      "g" ~ "Endothelial",
      .default = .data[[raw_insitutype_col_name]]
    )
  )
```

### SCTransform

```{r}
#| label: rna-sctransform-calculations
#| eval: false

## SCTransform
# Normalize and scale
breast_cancer_patients_analyze <- SCTransform(
  breast_cancer_patients_analyze,
  do.correct.umi = TRUE,
  return.only.var.genes = FALSE,
  ncells = 6000,
  assay = "RNA",
  new.assay.name = "SCT",
  seed.use = 13,
  verbose = TRUE)
# Run PCA
breast_cancer_patients_analyze <- RunPCA(
  breast_cancer_patients_analyze,
  assay = "SCT",
  reduction.key = "SCTPC_",
  reduction.name = "sct_pca_patients",
  seed.use = 42,
  verbose = TRUE)
# Elbow plot
patients_sct_elbow_plot <- generate_variance_elbow_plots(breast_cancer_patients_analyze, "sct_pca_patients", 50)
print(patients_sct_elbow_plot)
# Run UMAP
breast_cancer_patients_analyze <- RunUMAP(
  breast_cancer_patients_analyze,
  reduction = "sct_pca_patients",
  dims = 1:22,
  reduction.key = "SCTUMAP_",
  reduction.name = "sct_umap_patients",
  seed.use = 42)
```

```{r}
#| label: rna-sctransform-plots

# List to print and save
patients_ist_sct <- list()

# Plot cells
patients_ist_sct_plot <- DimPlot(
  object = breast_cancer_patients_analyze,
  group.by = "patients_ist_semisup_clusters_ann",
  reduction = "sct_umap_patients",
  cols = cell_type_colors)
patients_ist_sct[["patients_ist_sct_plot"]] <- patients_ist_sct_plot
# Plot patients
patients_sct_plot <- DimPlot(
  object = breast_cancer_patients_analyze,
  group.by = "Patient.ID",
  reduction = "sct_umap_patients",
  cols = patient_colors)
patients_ist_sct[["patients_sct_plot"]] <- patients_sct_plot

Idents(breast_cancer_patients_analyze) <- "neutral"
# Check the quantity and the expression level of genes after normalization
vln_plot_feat_count_sct <- VlnPlot(
  breast_cancer_patients_analyze,
  assay = "SCT",
  layer = "data",
  features = c("nFeature_SCT", "nCount_SCT"),
  ncol = 2,
  pt.size = 0
)
# Customize the titles for each plot
vln_plot_feat_count_sct[[1]] <- vln_plot_feat_count_sct[[1]] + labs(subtitle = "Gene count")
vln_plot_feat_count_sct[[2]] <- vln_plot_feat_count_sct[[2]] + labs(subtitle = "Total expression level")
# Add global title
vln_plot_feat_count_sct <- vln_plot_feat_count_sct + plot_annotation(title = "After SCT normalization")
# Save the plot
patients_ist_sct[["Violin_plot_features_count_sct"]] <- vln_plot_feat_count_sct

# Check the quantity and the expression level of genes per patient after normalization
vln_plot_feat_count_patients_sct <- VlnPlot(
  breast_cancer_patients_analyze,
  assay = "SCT",
  layer = "data",
  features = c("nFeature_SCT","nCount_SCT"),
  ncol = 2,
  pt.size = 0,
  group.by = "Patient.ID",
  cols = patient_colors
)
# Customize the titles for each plot
vln_plot_feat_count_patients_sct[[1]] <- vln_plot_feat_count_patients_sct[[1]] + labs(subtitle = "Gene count")
vln_plot_feat_count_patients_sct[[2]] <- vln_plot_feat_count_patients_sct[[2]] + labs(subtitle = "Total expression level")
# Add global title
vln_plot_feat_count_patients_sct <- vln_plot_feat_count_patients_sct + plot_annotation(title = "After SCT normalization")
# Save the plot
patients_ist_sct[["Violin_plot_patients_features_count_sct"]] <- vln_plot_feat_count_patients_sct

# QC the normalization
feature_plot_feat_count_sct <- FeaturePlot(
  breast_cancer_patients_analyze,
  features = c("nFeature_RNA", "nCount_RNA"),
  reduction = "sct_umap_patients",
  combine = TRUE) + 
  plot_annotation(title = "After SCT normalization")
# Save the plot
patients_ist_sct[["Feature_plot_features_count_sct"]] <- feature_plot_feat_count_sct

# Print
print(patients_ist_sct)
```

### Standard normalization

```{r}
#| label: rna-standard-normalization-calculations
#| eval: false

# Default assay & layer
DefaultAssay(breast_cancer_patients_analyze) <- "RNA"
DefaultLayer(breast_cancer_patients_analyze[["RNA"]]) <- "counts"

# Normalize
breast_cancer_patients_analyze <- NormalizeData(
  breast_cancer_patients_analyze,
  assay = "RNA")
# Scale
breast_cancer_patients_analyze <- ScaleData(
  breast_cancer_patients_analyze,
  assay = "RNA")
# Find variable features
breast_cancer_patients_analyze <- FindVariableFeatures(
  breast_cancer_patients_analyze,
  selection.method = "vst",
  nfeatures = 1000,
  assay = "RNA")
# RunPCA
breast_cancer_patients_analyze <- RunPCA(
  breast_cancer_patients_analyze,
  assay = "RNA",
  reduction.key = "RNAPC_",
  reduction.name = "rna_pca_patients",
  seed.use = 42,
  verbose = TRUE)
# Elbow plot
patients_rna_elbow_plot <- generate_variance_elbow_plots(breast_cancer_patients_analyze, "rna_pca_patients", 50)
print(patients_rna_elbow_plot)
# Run UMAP
breast_cancer_patients_analyze <- RunUMAP(
  breast_cancer_patients_analyze,
  reduction = "rna_pca_patients",
  dims = 1:22,
  reduction.key = "RNAUMAP_",
  reduction.name = "rna_umap_patients",
  seed.use = 42)
```

```{r}
#| label: rna-standard-normalization-calculations

# List to print and save
patients_ist_rna <- list()

# Plot cells
patients_ist_rna_plot <- DimPlot(
  object = breast_cancer_patients_analyze,
  group.by = "patients_ist_semisup_clusters_ann",
  reduction = "rna_umap_patients",
  cols = cell_type_colors)
patients_ist_rna[["patients_ist_rna_plot"]] <- patients_ist_rna_plot
# Plot patients
patients_rna_plot <- DimPlot(
  object = breast_cancer_patients_analyze,
  group.by = "Patient.ID",
  reduction = "rna_umap_patients",
  cols = patient_colors)
patients_ist_rna[["patients_rna_plot"]] <- patients_rna_plot

Idents(breast_cancer_patients_analyze) <- "neutral"
# Check the quantity and the expression level of genes after normalization
vln_plot_feat_count_rna <- VlnPlot(
  breast_cancer_patients_analyze,
  assay = "RNA",
  layer = "data",
  features = c("nFeature_RNA", "nCount_RNA"),
  ncol = 2,
  pt.size = 0
)
# Customize the titles for each plot
vln_plot_feat_count_rna[[1]] <- vln_plot_feat_count_rna[[1]] + labs(subtitle = "Gene count")
vln_plot_feat_count_rna[[2]] <- vln_plot_feat_count_rna[[2]] + labs(subtitle = "Total expression level")
# Add global title
vln_plot_feat_count_rna <- vln_plot_feat_count_rna + plot_annotation(title = "After RNA normalization")
# Save the plot
patients_ist_rna[["Violin_plot_features_count_rna"]] <- vln_plot_feat_count_rna

# Check the quantity and the expression level of genes per patient after normalization
vln_plot_feat_count_patients_rna <- VlnPlot(
  breast_cancer_patients_analyze,
  assay = "RNA",
  layer = "data",
  features = c("nFeature_RNA","nCount_RNA"),
  ncol = 2,
  pt.size = 0,
  group.by = "Patient.ID",
  cols = patient_colors
)
# Customize the titles for each plot
vln_plot_feat_count_patients_rna[[1]] <- vln_plot_feat_count_patients_rna[[1]] + labs(subtitle = "Gene count")
vln_plot_feat_count_patients_rna[[2]] <- vln_plot_feat_count_patients_rna[[2]] + labs(subtitle = "Total expression level")
# Add global title
vln_plot_feat_count_patients_rna <- vln_plot_feat_count_patients_rna + plot_annotation(title = "After RNA normalization")
# Save the plot
patients_ist_rna[["Violin_plot_patients_features_count_rna"]] <- vln_plot_feat_count_patients_rna

# QC the normalization
feature_plot_feat_count_rna <- FeaturePlot(
  breast_cancer_patients_analyze,
  features = c("nFeature_RNA", "nCount_RNA"),
  reduction = "rna_umap_patients",
  combine = TRUE) + 
  plot_annotation(title = "After RNA normalization")
# Save the plot
patients_ist_rna[["Feature_plot_features_count_rna"]] <- feature_plot_feat_count_rna

# Print
print(patients_ist_rna)
```

### Plots

```{r}
#| label: insitutype-plots

# Save insitutype data
insitutype_data <- list()

# Generate summary statistics for the Insitutype clusters
insitutype_data[["insitutype_clust_summary_patients"]] <- create_cluster_summary_per_patient(breast_cancer_patients_analyze, ann_insitutype_col_name)

# Violin plot with the expression of panCK, CD45 and CD68 for each Insitutype clusters
ist_clust_expr <- VlnPlot(
  breast_cancer_patients_analyze,
  assay = "RNA",
  layer = "data",
  features = c("Mean.PanCK", "Mean.CD45", "Mean.CD68"),
  pt.size = 0,
  group.by = ann_insitutype_col_name,
  combine = FALSE,
  cols = cell_type_colors
)
ist_clust_expr <- lapply(ist_clust_expr, function(x) x &NoLegend())
insitutype_data <- c(insitutype_data, ist_clust_expr)

# Calculate the mean of CD45, CD68 and PanCK for each Insitutype cluster
ist_ann_cluster_statistics <- breast_cancer_patients_analyze@meta.data %>%
  group_by(!!sym(ann_insitutype_col_name)) %>%
  summarise(
    `Mean PanCK` = mean(Mean.PanCK),
    `Mean CD45` = mean(Mean.CD45),
    `Mean CD68` = mean(Mean.CD68),
    .groups = "drop"
  )
insitutype_data[["ist_ann_cluster_statistics"]] <- ist_ann_cluster_statistics

print(insitutype_data)
```

```{r}
#| label: insitutype-save-data
#| eval: false

# Save the Insitutype plots
save_data(patients_ist_sct, here(images_dir, "Insitutype"))
save_data(patients_ist_rna, here(images_dir, "Insitutype"))
save_data(insitutype_data, here(images_dir, "Insitutype"))
# Save Seurat object
saveRDS(breast_cancer_patients_analyze, here(objects_dir, "breast_cancer_patients_analyze.rds"))
```

## Split

Create two separate Seurat objects for tumor and immune cells using the Insitutype clusters

```{r}
#| label: insitutype-split
#| eval: false

# Add insitutype annotated clusters to filt cells object
breast_cancer_patients_filt_cells <- AddMetaData(
  object = breast_cancer_patients_filt_cells,
  metadata = FetchData(
    object = breast_cancer_patients_analyze,
    vars = ann_insitutype_col_name),
  col.name = ann_insitutype_col_name
)
# Extract the Insitutype clusters metadata column
ist_ann_column <- FetchData(
  object = breast_cancer_patients_filt_cells,
  vars = ann_insitutype_col_name)
# Create Seurat objects with the non-cancerous cells
breast_cancer_patients_immune_cells <- 
  breast_cancer_patients_filt_cells[, which(x = ist_ann_column != "Tumor")]
# Create Seurat objects with the cancerous cells
breast_cancer_patients_tumor_cells <-
  breast_cancer_patients_filt_cells[, which(x = ist_ann_column == "Tumor")]
```

## Immune cells

### Computation

```{r}
#| label: immune-cells-read-from-drive

# Load immune cells object from memory
breast_cancer_patients_immune_cells <- readRDS(here(objects_dir, "breast_cancer_patients_immune_cells.rds"))
```

```{r}
#| label: immune-cells-computation
#| eval: false

# Run SCTransform
breast_cancer_patients_immune_cells <- SCTransform(
  breast_cancer_patients_immune_cells,
  do.correct.umi = TRUE,
  return.only.var.genes = FALSE,
  assay = "RNA",
  new.assay.name = "SCT",
  seed.use = 13,
  verbose = TRUE)
# Run PCA
breast_cancer_patients_immune_cells <- RunPCA(
  breast_cancer_patients_immune_cells,
  assay = "SCT",
  reduction.key = "SCTPC_",
  reduction.name = "sct_pca_immune_cells",
  seed.use = 42,
  verbose = TRUE)
# Generate variance elbow plots
generate_variance_elbow_plots(breast_cancer_patients_immune_cells, "sct_pca_immune_cells", 50)
# Run UMAP
breast_cancer_patients_immune_cells <- RunUMAP(
  breast_cancer_patients_immune_cells,
  reduction = "sct_pca_immune_cells",
  dims = 1:30,
  reduction.key = "SCTUMAP_",
  reduction.name = "sct_umap_immune_cells",
  seed.use = 42)

# Define the groups
cell_groups <- c(
  "Macrophage" = "Myeloid",
  "Mast cell" = "Myeloid", 
  "Monocyte" = "Myeloid",
  "Neutrophil" = "Myeloid", 
  "Dendritic cell" = "Myeloid", 
  "Plasmacytoid dendritic cell" = "Myeloid",
  "Endothelial" = "Stromal cells", 
  "Fibroblast" = "Stromal cells",
  "B cell" = "Lymphocites", 
  "T cell CD4" = "Lymphocites", 
  "T cell CD8" = "Lymphocites", 
  "T cell regulatory" = "Lymphocites", 
  "NK cell" = "Lymphocites", 
  "Plasma" = "Lymphocites", 
  "Plasmablast" = "Lymphocites"
)

# Name of the cell type metadata column
cell_type_col <- "cell_type"
# Create the cell type group metadata column
breast_cancer_patients_immune_cells@meta.data %<>%
   mutate("{cell_type_col}" := cell_groups[.data[[ann_insitutype_col_name]]])

# Save the Seurat object
saveRDS(breast_cancer_patients_immune_cells, here(objects_dir, "breast_cancer_patients_immune_cells.rds"))
```

### Plotting

```{r}
#| label: immune-cells-plotting

# Create empty list to store immune cells images
immune_cells_images <- list()

# Calculate the statistics for the immune cells
immune_cells_cluster_statistics <- breast_cancer_patients_immune_cells@meta.data %>%
  # Group by patient and cluster, then calculate percentage
  group_by(Patient.ID, !!sym(ann_insitutype_col_name), !!sym(cell_type_col)) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(Patient.ID) %>%
  mutate(Percentage = count / sum(count) * 100) %>%
  ungroup() %>%
  # Ensure Patient.ID is a factor
  mutate(Patient.ID = as.factor(Patient.ID)) %>%
  # Calculate mean and sd for each cluster
  group_by(!!sym(ann_insitutype_col_name)) %>%
  mutate(
    MeanPercentage = mean(Percentage),
    SDPercentage = sd(Percentage)
  ) %>%
  ungroup()
immune_cells_images[["immune_cells_cluster_statistics"]] <- immune_cells_cluster_statistics

# Plot the percentages of the various types of cells (except cancer cells)
immune_cells_cluster_distribution_barplot <- immune_cells_cluster_statistics %>%
  # Plot the data in a grouped barplot
  ggplot(aes(x = !!sym(ann_insitutype_col_name), y = Percentage, fill = Patient.ID)) +
  geom_bar(stat = "identity", position = position_dodge2(preserve = "single", padding = 0), width = .8) +
  facet_grid(cols = ggplot2::vars(!!sym(cell_type_col)), scales = "free_x", space = "free") +
  theme_minimal() +
  labs(x = NULL, 
       y = "Percentage of Cells", 
       title = "Immune Cells Types Distribution by Patient",
       fill = "Patient") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.spacing = unit(0.8, "lines")) +
  scale_fill_manual(values = patient_colors)
immune_cells_images[["immune_cells_cluster_distribution_barplot"]] <- immune_cells_cluster_distribution_barplot

# Plot the distribution of immune cell clusters by patient
immune_cells_cluster_distribution_dotplot <- immune_cells_cluster_statistics %>%
  # Plot the data
  ggplot(aes(x = Percentage, y = !!sym(ann_insitutype_col_name))) +
  # Add dots for each patient
  geom_point(aes(color = Patient.ID), size = 3, alpha = 0.7) +
  # Add mean percentage point
  stat_summary(aes(shape = "Mean"), fun = mean, geom = "point", size = 5, color = "black", alpha = 0.7) +
  # Add standard deviation error bars
  geom_errorbarh(aes(xmin = MeanPercentage - SDPercentage, 
                     xmax = MeanPercentage + SDPercentage, 
                     y = !!sym(ann_insitutype_col_name),
                     linetype = "Standard Deviation"), 
                 color = "black", alpha = 0.7, height = 0.5, size = 0.2) +
  theme_minimal() +
  ggforce::facet_col(
    facets = cell_type_col,
    scales = "free_y",
    space = "free",
    drop = TRUE,
    strip.position = "top"
  ) +
  labs(x = "Percentage of Cells", y = NULL,
       title = "Immune Cells Types Distribution by Patient",
       color = "Patient") +
  scale_color_manual(values = patient_colors) +
  scale_shape_manual(values = c("Mean" = 18), labels = c("Mean")) +
  scale_linetype_manual(values = c("Standard Deviation" = "solid"), labels = c("Standard Deviation")) +
  guides(
    color = guide_legend(order = 1),
    shape = guide_legend(order = 2, title = "Statistics"),
    linetype = guide_legend(order = 3, title = "Statistics")
  )
immune_cells_images[["immune_cells_cluster_distribution_dotplot"]] <- immune_cells_cluster_distribution_dotplot

# Umap immune cells types
immune_cells_type_umap_plot <- DimPlot(
  object = breast_cancer_patients_immune_cells,
  group.by = ann_insitutype_col_name,
  reduction = "sct_umap_immune_cells",
  cols = cell_type_colors
)
immune_cells_images[["immune_cells_type_umap_plot"]] <- immune_cells_type_umap_plot

# Umap immune cells groups
immune_cells_group_umap_plot <- DimPlot(
  object = breast_cancer_patients_immune_cells,
  group.by = cell_type_col,
  reduction = "sct_umap_immune_cells"
)
immune_cells_images[["immune_cells_group_umap_plot"]] <- immune_cells_group_umap_plot

print(immune_cells_images)
```

```{r}
#| label: immune-cells-save-plots
#| eval: false

# Save the immune cells plots
save_data(immune_cells_images, here(images_dir, "Immune cells"))
```


## Cancerous cells

### Clustering

```{r}
#| label: tumor-cells-read-from-drive

# Load tumor cells object from memory
breast_cancer_patients_tumor_cells <- readRDS(here(objects_dir, "breast_cancer_patients_tumor_cells.rds"))
```

```{r}
#| label: tumor-cells-computation
#| eval: false

# After subsetting a Seurat object it is good to normalize it again
breast_cancer_patients_tumor_cells <- SCTransform(
  breast_cancer_patients_tumor_cells,
  vars.to.regress = c("nFeature_RNA", "nCount_RNA"),
  return.only.var.genes = FALSE,
  assay = "RNA",
  new.assay.name = "SCTtumors",
  verbose = FALSE)

# Run PCA
breast_cancer_patients_tumor_cells <- RunPCA(
  breast_cancer_patients_tumor_cells,
  reduction.key = "TCPC_",
  reduction.name = "pca_tumor_cells",
  seed.use = 42,
  verbose = TRUE)
# Generate variance elbow plots
generate_variance_elbow_plots(breast_cancer_patients_tumor_cells, "pca_tumor_cells", 50)
# Dimension to use for subsequent analysis, decided lokking at the elbow plot
tumor_cells_dims <- 1:23
# Find neighbors of tumor cells
# Number of PCA dimensions used in Seurat's FindNeighbors function
#
# Using MORE dimensions:
# Captures more subtle biological variation
# Includes more complex relationships between genes
# May include more noise/technical artifacts
# Computationally more intensive
#
# Using FEWER dimensions:
# Focuses on major sources of variation
# More robust to technical noise
# May miss subtle biological signals
# Computationally faster
breast_cancer_patients_tumor_cells <- FindNeighbors(
  breast_cancer_patients_tumor_cells,
  reduction = "pca_tumor_cells",
  dims = tumor_cells_dims,
  verbose = TRUE)
# Name of the metadata column with the tumor clusters
tumor_cluster_name <- "louvain_tumor_cells_clusters"
# Find clusters of tumor cells
# The default resolution is 1, increase it to get more clusters or decrease it to get fewer clusters
# Try a range of resolutions
seq_res <- seq(0.1, 0.4, by = 0.1)
# Create custom cluster names based on the actual resolution values
tumor_cluster_seq_res <- glue::glue("{tumor_cluster_name}.{seq_res}")
# Find clusters at different resolutions
breast_cancer_patients_tumor_cells <- FindClusters(
  breast_cancer_patients_tumor_cells,
  resolution = seq_res,
  cluster.name = tumor_cluster_seq_res,
  random.seed = 5,
  verbose = TRUE)

# Run UMAP
breast_cancer_patients_tumor_cells <- RunUMAP(
  breast_cancer_patients_tumor_cells,
  reduction = "pca_tumor_cells",
  reduction.key = "TCUMAP_",
  reduction.name = "umap_tumor_cells",
  dims = tumor_cells_dims,
  verbose = TRUE,
  seed.use = 42)

# Save the Seurat object
saveRDS(breast_cancer_patients_tumor_cells, here(objects_dir, "breast_cancer_patients_tumor_cells.rds"))
```

### Plotting

```{r}
#| label: tumor-cells-plotting

tumor_plots_to_save <- list()

# View UMAP with tumor cells at different clustering resolutions
tumor_cells_different_resolutions <- DimPlot(
  breast_cancer_patients_tumor_cells,
  reduction="umap_tumor_cells",
  ncol=2,
  group.by=tumor_cluster_seq_res,
  label=TRUE,
  ) & 
  NoLegend() & 
  NoAxes() & 
  theme(
  plot.margin = unit(c(0, 0, 0, 0), "lines"),
  plot.title = element_text(size = 12, face = "bold")
  )
tumor_plots_to_save[["tumor_cells_different_resolutions"]] <- tumor_cells_different_resolutions

# View UMAP with tumor cells and patient clusters
tumor_cells_patient_id_plot <- DimPlot(
  breast_cancer_patients_tumor_cells,
  reduction = "umap_tumor_cells",
  label = TRUE,
  label.box=TRUE,
  group.by = "Patient.ID",
  cols = patient_colors) +
  labs(title = "Patient ID clusters") &
  NoLegend() &
  NoAxes()
tumor_plots_to_save[["tumor_cells_patient_id_plot"]] <- tumor_cells_patient_id_plot

# Chosen resolution
chosen_tumor_cluster_resolution <- 0.2
# Chosen cluster
chosen_tumor_cluster <- glue::glue("{tumor_cluster_name}.{chosen_tumor_cluster_resolution}")
# Set identity to tumor clusters
Idents(breast_cancer_patients_tumor_cells) <- chosen_tumor_cluster

# Generate DimPlot of chosen resolution
tumor_cells_chosen_resolution_plot <- DimPlot(
  breast_cancer_patients_tumor_cells,
  reduction = "umap_tumor_cells",
  group.by = chosen_tumor_cluster,
  label = TRUE) +
  labs(title = "Tumor Cell Clusters") &
  NoLegend() &
  NoAxes()
# Print DimPlots side by side
tumor_clusters_patient_clusters <- tumor_cells_patient_id_plot + tumor_cells_chosen_resolution_plot
tumor_plots_to_save[["tumor_clusters_patient_clusters"]] <- tumor_clusters_patient_clusters

# Generate FeaturePlot of tumor clusters
# max.cutoff q95 is set so any values above the 95th percentile will be set to the 95th percentile value,
# this helps prevent extreme outliers from dominating the color scale
# min.cutoff 0 is set so any positive value will be highlighted
tumor_cells_feature_plot <- (FeaturePlot(
  object = breast_cancer_patients_tumor_cells,
  reduction = "umap_tumor_cells",
  features = c("Mean.PanCK", "Mean.CD45", "Mean.CD68"),
  max.cutoff = "q95",
  min.cutoff = 0,
  label = TRUE) &
  NoAxes()) +
  plot_annotation(title = "Tumor Cells")
tumor_plots_to_save[["tumor_cells_feature_plot"]] <- tumor_cells_feature_plot

# Calculate statistics for the tumor clusters
tumor_cells_cluster_statistics <- breast_cancer_patients_tumor_cells@meta.data %>%
  dplyr::rename(`Tumor cluster` = !!sym(chosen_tumor_cluster)) %>%
  # Group by patient and cluster, then calculate percentage
  group_by(Patient.ID, `Tumor cluster`) %>%
  summarise(Count = n(), .groups = "drop") %>%
  group_by(Patient.ID) %>%
  mutate(Percentage = Count / sum(Count) * 100) %>%
  ungroup() %>%
  # Ensure Patient.ID is a factor
  mutate(Patient.ID = as.factor(Patient.ID))

# Print tibble with the percentages of cells in each cluster per patient
tumor_cells_percent_clust_patient <- tumor_cells_cluster_statistics %>%
  # Specify id_cols so the Count column is dropped
  pivot_wider(names_from = Patient.ID, values_from = Percentage, id_cols = `Tumor cluster`) %>%
  # Round the values to two decimal places
  mutate(across(2:8, round, 2)) %>%
  # Sort according to the Tumor cluster column
  arrange(`Tumor cluster`)
tumor_plots_to_save[["tumor_cells_percent_clust_patient"]] <- tumor_cells_percent_clust_patient

# Print tibble with the count of cells in each cluster per patient
tumor_cells_count_clust_patient <- tumor_cells_cluster_statistics %>%
  # Specify id_cols so the Percentage column is dropped
  pivot_wider(names_from = Patient.ID, values_from = Count, id_cols = `Tumor cluster`) %>%
  # Replace NA values with 0 so that the total cells per cluster can be calculated
  mutate(across(2:8, ~replace_na(.x, 0))) %>%
  group_by(`Tumor cluster`) %>%
  mutate(`Tot. clust. cells` = sum(across(where(is.numeric)))) %>%
  ungroup() %>%
  arrange(`Tumor cluster`)
tumor_plots_to_save[["tumor_cells_count_clust_patient"]] <- tumor_cells_count_clust_patient

# Plot the distribution of tumor cell clusters by patient
tumor_cells_cluster_distribution_plot <- tumor_cells_cluster_statistics %>%
  # Plot the data
  ggplot(aes(x = Percentage, y = `Tumor cluster`)) +
  # Add dots for each patient
  geom_point(aes(color = Patient.ID), size = 3, alpha = 0.7) +
  theme_minimal() +
  labs(x = "Percentage of Cells", y = "Tumor Cluster", 
       title = "Tumor Cell Clusters Distribution by Patient",
       color = "Patient") +
  theme(legend.position = "right") +
  scale_color_brewer(palette = "Set1") +
  guides(
    color = guide_legend(order = 1),
  )
tumor_plots_to_save[["tumor_cells_cluster_distribution_plot"]] <- tumor_cells_cluster_distribution_plot

# Identify genes in the SCTtumors assay that start with "KRT"
# These should be the genes that contributes the most to the gene expression
# measured by the antibody panCK
krt_genes <- grep("^KRT", rownames(breast_cancer_patients_tumor_cells[["SCTtumors"]]), value = TRUE)
# Calculate the average expression of the KRT genes for each cell
krt_avg_expression <- Matrix::colMeans(
  breast_cancer_patients_tumor_cells[["SCTtumors"]]@data[krt_genes, ])
# Add the average expression as a new metadata column
breast_cancer_patients_tumor_cells$KRT_Avg_Expression <- krt_avg_expression

# Visualize the co-expression of the KRT genes and the panCK antibody
KRT_panCK_coexpression <- (FeaturePlot(
  breast_cancer_patients_tumor_cells,
  reduction = "umap_tumor_cells",
  max.cutoff = "q95",
  min.cutoff = 0,
  features = c("Mean.PanCK", "KRT_Avg_Expression"),
  blend = TRUE
)  & NoAxes()) + 
  plot_layout(ncol = 2) +
  theme(plot.title = element_text(hjust = 0.5))
KRT_panCK_coexpression[[1]] <-
  KRT_panCK_coexpression[[1]] + 
  labs(title = "PanCK", subtitle = "Mean expression")
KRT_panCK_coexpression[[2]] <-
  KRT_panCK_coexpression[[2]] + 
  labs(title = "KRT genes", subtitle = "Mean expression")
KRT_panCK_coexpression[[3]] <-
  KRT_panCK_coexpression[[3]] + 
  labs(title = "PanCK & KRT genes", subtitle = "Co-expression")
tumor_plots_to_save[["KRT_panCK_coexpression"]] <- KRT_panCK_coexpression

# Violin plot with the expression of panCK, CD45 and CD68 for each Insitutype clusters
tumor_clust_protein_expr <- VlnPlot(
  breast_cancer_patients_tumor_cells,
  assay = "SCTtumors",
  layer = "data",
  features = c("Mean.PanCK", "Mean.CD45", "Mean.CD68"),
  pt.size = 0,
  group.by = chosen_tumor_cluster,
  combine = FALSE
)
tumor_clust_protein_expr <- lapply(
  tumor_clust_protein_expr,
  function(x) x & NoLegend() & labs(subtitle = "Tumor Clusters"))
names(tumor_clust_protein_expr) <- c("PanCK", "CD45", "CD68")
tumor_plots_to_save <- c(tumor_plots_to_save, tumor_clust_protein_expr)

# Calculate the mean of CD45, CD68 and PanCK for each Insitutype cluster
tumor_cluster_statistics <- breast_cancer_patients_tumor_cells@meta.data %>%
  group_by(!!sym(chosen_tumor_cluster)) %>%
  summarise(
    `Mean PanCK` = mean(Mean.PanCK),
    `Mean CD45` = mean(Mean.CD45),
    `Mean CD68` = mean(Mean.CD68),
    .groups = "drop"
  ) %>%
  arrange(desc(`Mean PanCK`))
tumor_plots_to_save[["tumor_cluster_statistics"]] <- tumor_cluster_statistics

print(tumor_plots_to_save)
```

```{r}
#| label: tumor-cells-save-plots
#| eval: false

# Save the tumor cells plots
save_data(tumor_plots_to_save, here(images_dir, "Tumor clusters"))
```

### Markers

```{r}
#| label: tumor-cells-markers-read-from-drive

# Load tumor cells object from memory
tumor_markers_data <- readRDS(here(objects_dir, "tumor_markers_data.rds"))

```


```{r}
#| label: tumor-cells-markers-computation
#| eval: false

# Find all markers of the tumor clusters
# GSEA needs both positive and negative markers
tumor_markers_data <- FindAllMarkers(
  breast_cancer_patients_tumor_cells,
  test.use = "wilcox",
  assay = "SCTtumors",
  only.pos = FALSE,
  random.seed = 5)

# Save the data
saveRDS(tumor_markers_data, here(objects_dir, "tumor_markers_data.rds"))
```


```{r}
#| label: tumor-cells-markers-plots

# List with data to save
tumor_markers_to_print <- list()

# Filter markers to get the most significant up-regulated ones per cluster
most_significant_tumor_markers <- tumor_markers_data %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1) %>%
  slice_head(n = 10) %>%
  ungroup()
tumor_markers_to_print[["most_significant_tumor_markers"]] <- most_significant_tumor_markers

tumor_clust_diff_expr_genes_heatmap <- DoHeatmap(
    breast_cancer_patients_tumor_cells,
    features = most_significant_tumor_markers$gene,
    assay = "SCTtumors",
    label = TRUE,
    size = 2
    #group.colors = color_lookup_table,
   ) + theme(
     axis.text.y = element_text(size = 5),
   ) + labs(
     title = paste("Tumor clusters"),
     subtitle = "Top 10 Differentially Expressed Genes per Cluster"
   )
tumor_markers_to_print[["tumor_clust_diff_expr_genes_heatmap"]] <- tumor_clust_diff_expr_genes_heatmap

print(tumor_markers_to_print)
```

```{r}
#| label: tumor-markers-save
#| eval: false

# Save the data
save_data(tumor_markers_to_print, here(images_dir, "Tumor markers"))
```

## Gene Set Enrichment Analysis

### GSEA objects

```{r}
#| label: gsea-load-objects

# Load the GSEA results
GSEA_results <- readRDS(here(objects_dir, "GSEA_results.rds"))
```

```{r}
#| label: gsea-create-objects
#| eval: false

# Set default assay to RNA
DefaultAssay(breast_cancer_patients_tumor_cells) <- "RNA"

# Set the colors for the p adjust gradient bar
max_color <- rgb(238, 197, 194, maxColorValue = 255)
min_color <- rgb(215, 102, 86, maxColorValue = 255)
options(enrichplot.colours = c(min_color, max_color))

# List to save the GSEA results
GSEA_results <- list()
# Run GSEA for each tumor cluster
for (cluster in levels(breast_cancer_patients_tumor_cells)) {
  tumor_cluster_number <- cluster
  print(paste("Running GSEA analysis for cluster:", tumor_cluster_number))
  
  # Get the markers for the tumor cluster
  tumor_cluster_markers <- tumor_markers_data %>%
    dplyr::filter(cluster == tumor_cluster_number)
  
  # How to create the gene list
  # http://yulab-smu.top/biomedical-knowledge-mining-book/faq.html#genelist
  # Gene list creation
  gsea_gene_list <- tumor_cluster_markers %>%
    dplyr::mutate(rank = rank(avg_log2FC, ties.method = "random")) %>%
    dplyr::arrange(desc(rank)) %>%
    with(setNames(avg_log2FC, gene))
  
  # Run GSEA
  gsea <- gseGO(geneList     = gsea_gene_list,
                    keyType      = "SYMBOL",
                    OrgDb        = org.Hs.eg.db, 
                    ont          = "BP",
                    minGSSize    = 10,
                    maxGSSize    = 500,
                    pvalueCutoff = 0.05,
                    verbose      = TRUE,
                    pAdjustMethod = "fdr")
  # Save the GSEA results
  GSEA_results[[tumor_cluster_number]] <- gsea
}

# Save the GSEA results
saveRDS(GSEA_results, here(objects_dir, "GSEA_results.rds"))
```

### GSEA plots

```{r}
#| message: false
#| warning: false
#| fig-width: 9
#| fig-height: 6
# Disable messages and warnings so they do not appear above the first image generated by the loop
# Make images bigger so they are easier to read

# Create a list of gene counts for each cluster
cluster_gene_stats <- list()
for (cluster in levels(breast_cancer_patients_tumor_cells)) {
  tumor_cluster_markers <- tumor_markers_data %>%
    dplyr::filter(cluster == !!cluster)
  
  # Calculate gene counts and save them in a list
  cluster_gene_stats[[cluster]] <- list(
    num_upreg_genes = tumor_cluster_markers %>%
      dplyr::filter(avg_log2FC > 0, p_val < 0.05) %>%
      nrow(),
    num_downreg_genes = tumor_cluster_markers %>%
      dplyr::filter(avg_log2FC < 0, p_val < 0.05) %>%
      nrow()
  )
}

# Lists to save plots and tibbles
GSEA_plots <- list()
GSEA_tibbles <- list()

GSEA_to_plot <- list()
# GSEA plots with results
for (cluster in names(GSEA_results)) {
  gsea <- GSEA_results[[cluster]]
  # If there are results
  if (nrow(gsea@result) > 0) {
    GSEA_to_plot[[cluster]] <- GSEA_results[[cluster]]
  }
}
# Print the names of the clusters with GSEA results
print(names(GSEA_to_plot))

# Simplify values for the GSEA plots
GSEA_plot_simply_cutoff <- c(
  "0" = 1,
  "2" = 0.4,
  "3" = 1,
  "4" = 0.5,
  "6" = 0.5,
  "7" = 1)
# Create plots and tibbles
# Do not plot if no pathways have been found
for (cluster in names(GSEA_to_plot)) {
  gsea <- GSEA_to_plot[[cluster]]
  # Simplify GSEA results by grouping together or eliminating terms that are very similar or redundant
  gsea_simplified <- clusterProfiler::simplify(gsea, cutoff = GSEA_plot_simply_cutoff[[cluster]])
  gene_stats <- cluster_gene_stats[[cluster]]
  num_upreg_genes <- gene_stats$num_upreg_genes
  num_downreg_genes <- gene_stats$num_downreg_genes
  
  # Prepare plot labels
  GSEAlabels <- labs(
    title = paste("Significant Pathways in Tumor Cluster", cluster), 
    subtitle = "by Gene Set Enrichment Analysis",
    caption = paste0("Based on ", num_upreg_genes, " up-regulated genes and ", num_downreg_genes, " down-regulated genes.")
  )
  # Prepare plot aesthetics
  GSEAtheme <- theme(
    plot.title = element_text(hjust = 0.5, size = 20),
    plot.subtitle = element_text(hjust = 0.5, size = 15),
    axis.text.x = element_text(angle = 0, size = 10),
    axis.text.y = element_text(angle = 0, size = 6)
  ) 
  # Make the GSEA plot
  GSEADotPlot <- dotplot(gsea_simplified, showCategory = 25) +
    GSEAlabels + labs(x = "Gene Ratio", y = "Biological Pathway") +
    GSEAtheme
  
  # Save the plot and tibble
  GSEA_plots[[glue("GSEA Tumor cluster {cluster}")]] <- GSEADotPlot
  GSEA_tibbles[[glue("GSEA Tumor cluster {cluster}")]] <- as_tibble(gsea_simplified@result)
}
```

```{r}
#| label: gsea-plots

# Display the GSEA plots
print(GSEA_plots)
```

```{r}
#| label: gsea-tibbles

# Display the GSEA tibbles
print(GSEA_tibbles)
```

```{r}
#| label: gsea-save
#| eval: false

# Save the GSEA plots
save_data(GSEA_plots, here(images_dir, "GSEA plots"))
# Save the GSEA tibbles
save_data(GSEA_tibbles, here(images_dir, "GSEA tables"))
# Save the GSEA results
saveRDS(GSEA_results, here(objects_dir, "GSEA_results.rds"))
```


## Merge all cells together

```{r}
#| label: merge-cells-metadata

# Copy the insitutype metadata
breast_cancer_patients_filt_cells@meta.data["ist_semisup_clusters_ann"] <- 
  breast_cancer_patients_integrated@meta.data["ist_semisup_clusters_ann"]

## Copy tumor clusters
# Find common cells between tumor and original Seurat objects
common_tumor_cells <- dplyr::intersect(rownames(breast_cancer_patients_filt_cells@meta.data), 
                          rownames(breast_cancer_patients_tumor_cells@meta.data))
# Copy the metadata for the tumor cells
breast_cancer_patients_filt_cells@meta.data[common_tumor_cells, chosen_tumor_cluster] <- 
  breast_cancer_patients_tumor_cells@meta.data[common_tumor_cells, chosen_tumor_cluster]

# Merge the insitutype phenotyping with the tumor clusters
breast_cancer_patients_filt_cells@meta.data <- breast_cancer_patients_filt_cells@meta.data %>%
  mutate(cell_cluster = if_else(
    ist_semisup_clusters_ann != "Tumor",
    ist_semisup_clusters_ann,
    glue("Tumor {get(chosen_tumor_cluster)}")
))
print(glue("Number of cell phenotypes (Insitutype + Tumor clusters): {length(unique(breast_cancer_patients_filt_cells@meta.data$cell_cluster))} cells"))
```

## Spatial plots of clusters

Plot the spatial distribution of the cell types and label them according to the immune/tumor clusters where they belong.

```{r}
#| label: spatial-clusters-plots

# Create the color palette for the niches
cells_all_phenotypes_color_palette <- generate_colors_lookup_table(
  breast_cancer_patients_filt_cells,
  cluster_column_name = "cell_cluster",
  color_palette = base::unname(polychrome()))
# Create the plots with the cell types for every stamp
cell_types_stamps_plots <- generate_spatial_plots(
  breast_cancer_patients_filt_cells,
  cluster_var = "cell_cluster",
  cluster_name = "Cell types with tumor subclusters",
  legend_fill = "Cell types",
  color_lookup_table = cells_all_phenotypes_color_palette)
# Display the plots
print(cell_types_stamps_plots)
```

```{r}
#| eval: false

# Save the plots
save_data(cell_types_stamps_plots, here(images_dir, "Stamps_with_clusters"))
```

## Spatial niches

### Build niches

```{r}
#| label: build-spatial-niches

# To build the niche assay, Seurat uses only the spatial images and the cell phenotypes (a column from the metadata)
# Number of niches
num_niches <- 10
# Build the niche assay
breast_cancer_patients_filt_cells <- BuildNicheAssay(
  object = breast_cancer_patients_filt_cells,
  fov = "LU001FFP03",
  group.by = ann_insitutype_col_name,
  assay = "niche",
  cluster.name = "niches",
  # Number of niches to find, default is 4
  niches.k = num_niches,
  # Number of neighbors to consider, default is 20
  # Very small neighborhoods produce sparse and noisy data
  # Very large neighborhoods become inaccurate representations of a cell’s 3D surroundings:
  # the area of your circular neighborhood increases with the square of the radius,
  # but the volume of the corresponding (unobserved) 3D tissue 
  # region increases with the cube of the radius.
  # This means that the larger the radius, the less of your 3D neighborhood falls in
  # the narrow tissue slide you’ve assayed, and the more it consists of unseen cells
  # increasingly far away in the Z-dimension.
  neighbors.k = 30)
```

```{r}
#| eval: false

# Save the object
saveRDS(breast_cancer_patients_filt_cells, here(objects_dir, glue("breast_cancer_patients_filt_cells_{num_niches}_niches.rds")))
```

### Spatial plots of niches

```{r}
#| label: spatial-niches-plots

# Create the color palette for the niches
niches_color_palette <- generate_colors_lookup_table(
  breast_cancer_patients_filt_cells,
  cluster_column_name = "niches",
  color_palette = brewer.pal(12, name = "Set3"))
# Create the plots with the niches for every stamp
niches_stamps_plots <- generate_spatial_plots(
  breast_cancer_patients_filt_cells,
  cluster_var = "niches",
  cluster_name = "Seurat niches",
  legend_fill = "Niches",
  color_lookup_table = niches_color_palette)
# Display the plots
print(niches_stamps_plots)
```

```{r}
#| eval: false

# Save the plots
save_data(niches_stamps_plots, here(images_dir, glue("Stamps_with_{num_niches}_niches")))
```

### Statistics about niches

```{r}
#| label: niches-statistics

# Count and calculate percentage of cell types per niche
cell_type_counts <- breast_cancer_patients_filt_cells@meta.data %>%
  group_by(niches, cell_cluster) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100) %>%
  arrange(.by_group = TRUE)
# Print the cell type counts and percentages
print(cell_type_counts)

# Get the list of unique niches
niches <- sort(unique(breast_cancer_patients_filt_cells$niches))
# Print the niches
print(sort(niches))
# Initialize an empty list to store plots
niches_barplot_list <- list()

# Loop through each niche and create a bar plot
for (niche in niches) {
  
  # Filter out cells in other niches
  niche_data <- cell_type_counts %>% dplyr::filter(niches == niche)
  
  # Set the cutoff value for the percentage
  cutoff <- 2
  # Create the bar plot
  niche_barplot <- niche_data %>%
    dplyr::filter(percentage >= cutoff) %>%
    ggplot(aes(x = cell_cluster, y = percentage, fill = cell_cluster)) +
  geom_bar(stat = "identity") +
  labs(title = paste("Niche:", niche),
       caption = glue("Percentage cutoff value: {cutoff}%"),
       x = "Cell Type",
       y = "Percentage (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = cells_all_phenotypes_color_palette) +
  NoLegend()

  # Add the plot to the list
  niches_barplot_list[[glue::glue("Niche_{niche}_barplot")]] <- niche_barplot
}

# Display all niches bar plots
print(niches_barplot_list)
```

```{r}
#| label: niches-patients-statistics

# Create list to save data
niches_patient_data <- list()

# Count and calculate percentage of cell types per niche
niches_patient_counts <- breast_cancer_patients_filt_cells@meta.data %>%
  mutate(niches = factor(niches, levels = sort(unique(niches))),
         Patient.ID = factor(Patient.ID)) %>%
  group_by(Patient.ID, niches) %>%
  summarise(count = n()) %>%
  mutate(percentage = (count / sum(count)) * 100) %>%
  arrange(Patient.ID, .by_group = TRUE)
# Add to list
niches_patient_data[["niches_patient_counts"]] <- niches_patient_counts

# Create the bar plot
niches_patient_dotplot <- ggplot(niches_patient_counts,
                                 aes(x = Patient.ID, y = percentage, color = niches)) +
  geom_rect(data = unique(niches_patient_counts["Patient.ID"]),
            aes(xmin = as.numeric(Patient.ID) - 0.4,
                xmax = as.numeric(Patient.ID) + 0.4,
                ymin = -Inf, ymax = Inf),
            fill = "grey90", alpha = 0.3, inherit.aes = FALSE) +
  geom_point(size = 2, position = position_dodge(width = 0.4)) +
  labs(title = paste("Niches distribution across patients"),
       x = "Patient",
       y = "Percentage (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(hjust = 1)) +
  scale_color_manual(values = niches_color_palette)
# Add to list
niches_patient_data[["niches_patient_dotplot"]] <- niches_patient_dotplot

# Print the list
print(niches_patient_data)
```

```{r}
#| eval: false

# Folder name
stat_niches_dir <- glue("Statistics_{num_niches}_niches")
# Save the plots
save_data(niches_barplot_list, here(images_dir, stat_niches_dir))
save_data(niches_patient_data, here(images_dir, stat_niches_dir))
```

## CellChat

```{r}
#| label: cellchat

data.input = Seurat::GetAssayData(breast_cancer_patients_analyze, layer = "data", assay = "SCT")
spatial.locs = Seurat::GetTissueCoordinates(
  object = breast_cancer_patients_analyze,
  image = "LU001FFP03",
) %>%
# Set the rownames equal to the cell names and remove the cell column
  tibble::column_to_rownames(var = "cell")

# For CosMx data, the spatial coordinates are in pixels and the conversion factor of converting spatial coordinates from Pixels to Micrometers is 0.18. Because CosMx does not include the uniform cell size like 10X Visium and Slide-seq, users can compute the minimum cell centroid-to-centroid distance via computeCellDistance and use its half value as the tolerance factor. Of note, CellChat does not need an accurate tolerance factor, which is used for determining whether considering the cell-pair as spatially proximal if their distance is greater than interaction.range but smaller than “interaction.range + tol”.

conversion.factor = 0.18
d = computeCellDistance(spatial.locs)
spot.size = min(d)*conversion.factor # converting the distance in Pixels to Micrometers
spatial.factors = data.frame(ratio = conversion.factor, tol = spot.size/2)

cellchat <- createCellChat(
  object = data.input,
  meta = breast_cancer_patients_filt_cells@meta.data,
  group.by = ann_insitutype_col_name,
  datatype = "spatial",
  coordinates = spatial.locs,
  spatial.factors = spatial.factors)

CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
```


## General overview of the data

Create a table with an entry for every FOV in the Seurat object analyzed in this study. The table will contain the patient ID, the serial core, the stamp, and the FOV.

```{r}
#| label: data-overview
#| echo: false

# Cohort of all the patients
immunofluorescence <- breast_cancer_patients@meta.data %>% 
                      dplyr::select("Mean.PanCK", "Mean.CD45", "Mean.CD68")

cohort <- fastCohorting(immunofluorescence,
  gaussian_transform = TRUE, n_cohorts = 5
)
# check clusters and cohort numbers
table(cohort)

# List of the gene data (1000-plex RNA)
rownames(breast_cancer_patients)
# Create a data frame to store the table
patient_table <- data.frame(
  Patient_ID = character(),
  Serial_Cores = character(),
  Stamps = character(),
  FOVs = character(),
  stringsAsFactors = FALSE
)

# Iterate over each patient
for (patient_id in sort(unique(unlist(breast_cancer_patients$Patient.ID)))) {
  # Subset the data for the current patient
  patient_data <- subset(x = breast_cancer_patients@meta.data, subset = Patient.ID == patient_id)

  # Get the unique serial cores for the current patient
  serial_cores <- unique(patient_data$core_serial)

  # Iterate over each serial core
  for (serial_core_id in serial_cores) {
    # Subset the data for the current serial core
    serial_core_data <- subset(x = patient_data, subset = core_serial == serial_core_id)

    # Get the unique stamps for the current serial core
    stamps <- unique(serial_core_data$stamp)
    
    # Iterate over each stamp
    for (stamp_id in stamps) {
      # Subset the data for the current stamp
      stamp_data <- subset(x = serial_core_data, subset = stamp == stamp_id)

      # Get the unique FOVs for the current stamp
      fovs <- unique(stamp_data$fov)

      # Add a row to the patient table for each FOV
      for (fov_id in fovs) {
        patient_table <- rbind(patient_table, data.frame(
          Patient_ID = patient_id,
          Serial_Cores = serial_core_id,
          Stamps = stamp_id,
          FOVs = fov_id
        ))
      }
    }
  }
}

# Print the patient table
print(patient_table)
# Print all the patients ID
sort(unique(unlist(breast_cancer_patients$Patient.ID)))

# Print all the FOV
breast_cancer_fovs <- sort(unique(unlist(breast_cancer_patients$fov)))

# Print the number of stamps
length(unique(paste(
  breast_cancer_patients@meta.data$core_serial,
  breast_cancer_patients@meta.data$stamp)))
```

### Tissue micro array

Print the patients' information and create two representation of the TMA: one with the primary diagnosis highlighted and one with the quality of the FOVs with a primary diagnosis of breast cancer highlighted.

```{r}
#| label: TMA-info

# List with plots & dataframe to be saved
TMA_info_to_save <- list()
# List with plots & dataframe to be displayed
TMA_info_to_display <- list()

# Information about the patients involved in the study
patient_info <- read_excel(here("Analysis", "metadata", "updatedPACC_Copy of METBRA_patient_v1_now_updated_dec_2022_GOOD_mar_2024_Lanzing.xlsx"))
TMA_info_to_display[["Patient_info"]] <- patient_info

# FOVs & Core serials
LU001FFP03_FOV <- read_excel(here("Analysis", "metadata", "LU001FFP03_FOV.xlsx"))
# Core serials, Patients' ID & Primary Diagnosis
TMA_METBRA_COSMX <- read_excel(
  path = here("Analysis", "metadata", "TMA_METBRA_COSMX Analysis.xlsx"),
  sheet = "TMA_list")
# FOVs & associated primary diagnosis
FOVs_primary_diagnosis <- left_join(
  x = LU001FFP03_FOV,
  y = TMA_METBRA_COSMX,
  by = c("core_serial" = "Full Serial Number"))
# X, Y & Z FOVs positions
tissue_micro_array <- read_csv(gzfile(
  here("Analysis", "flat_files", "LU001FFP03", "LU001FFP03_fov_positions_file.csv.gz")),
  col_types = cols(
  Slide = col_integer(),
  X_mm = col_double(),
  Y_mm = col_double(),
  Z_mm = col_double(),
  ZOffset_mm = col_double(),
  ROI = col_integer(),
  FOV = col_integer(),
  Order = col_integer(),
  Run_Tissue_name = col_character()))
# FOVs, associated primary diagnosis & X, Y, Z positions
FOVs_prim_diag_pos <- left_join(
  x = tissue_micro_array,
  y = FOVs_primary_diagnosis,
  by = c("FOV" = "fov"))
# FOVs, associated primary diagnosis, X, Y positions & quality
FOVs_prim_diag_pos_qual <- FOVs_prim_diag_pos %>%
  dplyr::mutate(Quality = case_when(
    is.na(`Primary Diagnosis`) ~ NA_character_,
    `Primary Diagnosis` != "breast cancer" ~ NA_character_,
    FOV %in% breast_cancer_fovs ~ "good",
    TRUE ~ "bad"
  ))

# Plots shared parameters
square_size <- 5
square_text_size <- 1.6
title <- "TMA LU001FFP03"

# TMA plot with FOVs positions and associated primary diagnosis
LU001FFP03_TMA_primary_diag <- ggplot(FOVs_prim_diag_pos_qual, aes(x = X_mm, y = Y_mm)) +
  geom_point(aes(color = `Primary Diagnosis`), shape = 15, size = square_size) +
  geom_text(aes(label = FOV), size = square_text_size) +
  coord_equal() +
  labs(title = title,
       color = "Primary diagnosis") +
  scale_color_manual(values = c("breast cancer" = "#00B5EE", "lung cancer" = "#E26EF7"),
                     na.translate = TRUE, 
                     na.value = "grey50",
                     breaks = c("breast cancer", "lung cancer"))
LU001FFP03_TMA_primary_diag_name <- paste0("TMA_LU001FFP03_primary_diagnosis_highlighted")
TMA_info_to_save[[LU001FFP03_TMA_primary_diag_name]] <- LU001FFP03_TMA_primary_diag

# TMA plot with FOVs positions and quality of those with primary diagnosis of breast cancer
LU001FFP03_TMA_breast_cancers_stamps_quality <- ggplot(
  FOVs_prim_diag_pos_qual, aes(x = X_mm, y = Y_mm)) +
  geom_point(aes(color = `Quality`), shape = 15, size = square_size) +
  geom_text(aes(label = FOV), size = square_text_size) +
  coord_equal() +
  labs(title = title,
       color = "Breast cancer\nstamps quality") +
  scale_color_manual(values = c("good" = "#00BB44", "bad" = "#F8766D"),
                     na.translate = TRUE, 
                     na.value = "grey50",
                     breaks = c("good", "bad"))
LU001FFP03_TMA_breast_cancer_stamps_highlighted_name <- 
  paste0("TMA_LU001FFP03_breast_cancer_stamps_quality")
TMA_info_to_save[[LU001FFP03_TMA_breast_cancer_stamps_highlighted_name]] <- 
  LU001FFP03_TMA_breast_cancers_stamps_quality

print(c(TMA_info_to_display, TMA_info_to_save))
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-TMA-info
#| include: false
#| echo: false
#| eval: false

save_data(TMA_info_to_save, here(images_dir), images_ext)
```

### Read Akoya Data

The Akoya data is available in an Excel file, extract the data for the full cores and rename the columns with the name of the cell types.

```{r}
# File path to the Akoya data
file_path <- here(
  "Analysis",
  "Akoya_spatial_multiplex_immune_cell_data",
  "Breast cancer",
  "M1 Breast Full Cores Final + Image",
  "Results_breast_full_cores.xlsx"
)

# Read the file with the Akoya data
# The data is in the second sheet, the first row is skipped (the header is on the second row)
# and the columns with useless data are removed
data <- read_excel(
  file_path,
  sheet = 2,
  skip = 1,
  col_types = c(
    "skip",
    "skip",
    "text",
    "text",
    "skip",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric"
  )
)

# Create an empty tibble to store the filtered data
# Only the total cell data is kept
akoya_data <- data %>% dplyr::slice(0)

# Add only the rows with the total cell count to the tibble
for (i in seq(3, nrow(data), by = 3)) {
  row <- data[i, ]
  akoya_data <- add_row(.data = akoya_data,row)
}

# Rename columns to align with the nomenclaure used in the rest of the analysis
akoya_data <- akoya_data %>% dplyr::rename(
  "Tumor" = "Pan-CK+/CD4-/CD8-/CD20-/CD68-/FOXP3-",
  "T cell CD4" = "Pan-CK-/CD4+/FOXP3-",
  "T cell regulatory" = "Pan-CK-/CD4+/FOXP3+",
  "T cell CD8" = "Pan-CK-/CD8+",
  "B cell" = "Pan-CK-/CD20+",
  "Macrophage" = "Pan-CK-/CD68+"
)

# Merge the two types of T-cells into a single column
# processed_data <- processed_data %>% mutate(
#   "T-cell" = `T-cell CD4` + `T-cell CD8`
# ) %>% select(-`T-cell CD4`, -`T-cell CD8`)

# Created manually from a schematic of the TMA in METBRA PhenoImager Analysis file
map_TMA_row_column_to_core <- tibble(
  `TMA Row` = c("12", "5", "10", "10", "11", "11", "12", "2", "3", "4", "6", "7", "8", "9", "9"),
  `TMA Column` = c("E", "F", "E", "F", "E", "F", "F", "F", "F", "F", "F", "F", "E", "E", "F"),
  core = c("M6", "M4", "M7", "M2", "M7", "M1", "M1", "M6", "M5", "M5", "M4", "M3", "M8", "M8", "M2")
)

# Merge the data data about the cores with the Akoya data and make it the first column
akoya_data <- akoya_data %>%
  left_join(map_TMA_row_column_to_core, by = c("TMA Row", "TMA Column")) %>%
  dplyr::select(all_of(names(map_TMA_row_column_to_core)), everything())

# Subset the TMA_METBRA_COSMX data frame to only the useful columns
TMA_METBRA_COSMX_subset <- TMA_METBRA_COSMX[, c("Full Serial Number", "Patient ID")]

# Merge the Patient IDs with the Akoya data and make it the first column
akoya_data <- akoya_data %>%
  left_join(TMA_METBRA_COSMX_subset, by = join_by("core" == "Full Serial Number")) %>%
  mutate(`Patient ID` = as.factor(`Patient ID`)) %>%
  dplyr::select(`Patient ID`, everything()) %>%
  arrange(`core`)

# Remove columns that were only used for merging
akoya_data <- akoya_data %>%
  dplyr::select(-`TMA Column`, -`TMA Row`)

# Sum the data for each patient
akoya_by_patient <- akoya_data %>%
  dplyr::select(-core) %>%
  group_by(`Patient ID`) %>%
  summarise(across(where(is.numeric), \(x) sum(x, na.rm = TRUE)))

# Print the tibbles
print(list(akoya_data, akoya_by_patient))
```


## Clustering per patient

Cluster data for every patient and create a Seurat object for each patient. The functions used to cluster the data are defined in the `Utils.R` file.

The individual script of every patient generates a list with all the images and data frames that can be saved and displayed.

```{r}
#| label: merged-data

# Clusters column names
protein_cluster_var <- "protein_clusters"

louvain_cluster_var <- "rna_louvain_clusters"
louvain_cluster_var_ann <- "rna_louvain_clusters_ann"

ist_cluster_var <- "ist_semisup_clusters"
ist_cluster_var_ann <- "ist_semisup_clusters_ann"

# Clusters plotting names
protein_cluster_name <- "Protein Clusters"

louvain_cluster_name <- "Louvain Clusters"
louvain_cluster_name_ann <- "Louvain Clusters Annotated"

ist_cluster_name <- "Insitutype Clusters"
ist_cluster_name_ann <- "Insitutype Clusters Annotated"

# Collect all patients' data in a list
patients_rna_data <- list()
```

### Patient 1

```{r}
#| label: analyze-patient-1

# Patient data
this_patient_num = "1"

# Extract patient data
patient_1_data <- extract_patient_data(breast_cancer_patients, this_patient_num)
# Create empty vector to store the plots
patient_1_plots <- c()

# Analyze protein data
patient_1_data <- analyze_proteins(patient_1_data)

### FILTERING - PROTEINS CLUSTERING ###
# Elbow plot
patient_1_plots <- c(patient_1_plots, generate_variance_elbow_plots(patient_1_data, "pca_proteins", 9))

# Feature plot of proteins, dyes and area
proteins_features_plots <- generate_feature_plot(
  patient_data = patient_1_data,
  reduction = "umap_proteins",
  features = c("Mean.PanCK", "Mean.CD45", "Mean.CD68", "Mean.Membrane", "Mean.DAPI", "Area" ),
  max_cutoff = "q95")
patient_1_plots <- c(patient_1_plots, proteins_features_plots)

# Generate the color palette for the protein clusters
this_patient_protein_color_table <- generate_colors_lookup_table(patient_1_data, protein_cluster_var, known_clusters_colors)
# Spatial plot with clusters colors
patient_1_plots <- c(patient_1_plots, generate_spatial_plots(
  patient_1_data,
  protein_cluster_var,
  cluster_name = protein_cluster_name,
  color_lookup_table = this_patient_protein_color_table))
# Umap plot with clusters colors
patient_1_plots <- c(patient_1_plots, generate_umap(
  patient_1_data,
  protein_cluster_var, 
  "umap_proteins",
  cluster_name = protein_cluster_name,
  color_lookup_table = this_patient_protein_color_table))
# Remove the color palette for the protein clusters
rm(this_patient_protein_color_table)

# Remove red blood cells
patient_1_data <- remove_clusters(patient_1_data, "protein_clusters", c(5))

### UNANNOTATED LOUVAIN CLUSTERING ###
# Analyze RNA data
patient_1_data <- normalize_cluster_data(patient_1_data)
patient_1_plots <- c(patient_1_plots, generate_variance_elbow_plots(patient_1_data, "pca_rna", 50))
# Generate the colors for the louvain unannotated clusters
this_patient_louvain_color_table <- generate_colors_lookup_table(patient_1_data, louvain_cluster_var, known_clusters_colors)
# Spatial plot with louvain clusters colors
patient_1_plots <- c(patient_1_plots, generate_spatial_plots(
  patient_1_data,
  louvain_cluster_var,
  cluster_name = louvain_cluster_name,
  color_lookup_table = this_patient_louvain_color_table))
# Umap plot with louvain clusters colors
patient_1_plots <- c(patient_1_plots, generate_umap(
  patient_1_data,
  louvain_cluster_var, 
  "umap_rna",
  cluster_name = louvain_cluster_name,
  color_lookup_table = this_patient_louvain_color_table))
# Heatmap of the louvain clusters
patient_1_plots <- c(patient_1_plots, generate_dyn_text_heatmap(
  patient_1_data,
  louvain_cluster_var,
  "RNA",
  cluster_name = louvain_cluster_name,
  color_lookup_table = this_patient_louvain_color_table))
# Remove the color palette for the louvain clusters
rm(this_patient_louvain_color_table)

### UNANNOTATED INSITUTYPE CLUSTERING ###
# Execute insitutype
patient_1_ist_semisup <- run_ist_semisup_extract_data(patient_1_data)
patient_1_data[[ist_cluster_var]] <- patient_1_ist_semisup$clust
# Colors for the ist plots
this_patient_ist_color_table <- generate_colors_lookup_table(patient_1_data, ist_cluster_var, known_clusters_colors)
# Spatial plot with louvain clusters colors
patient_1_plots <- c(patient_1_plots, generate_spatial_plots(
  patient_1_data,
  ist_cluster_var,
  cluster_name = ist_cluster_name,
  color_lookup_table = this_patient_ist_color_table))
# Generate the umap with the unannotated clusters
patient_1_plots <- c(patient_1_plots, generate_umap(
  patient_1_data,
  ist_cluster_var,
  "umap_rna",
  cluster_name = ist_cluster_name,
  color_lookup_table = this_patient_ist_color_table))
# Generate the flightpath plot
patient_1_plots <- c(patient_1_plots, generate_flightpath(
  patient_1_ist_semisup,
  patient_num = "1",
  color_lookup_table = this_patient_ist_color_table))
# Generate the heatmap of the non-annotated clusters
patient_1_plots <- c(patient_1_plots, generate_dyn_text_heatmap(
  patient_1_data,
  ist_cluster_var,
  "RNA",
  cluster_name = ist_cluster_name,
  color_lookup_table = this_patient_ist_color_table))
# Remove the color palette for the ist clusters
rm(this_patient_ist_color_table)

### ANNOTATED LOUVAIN CLUSTERING ###
# Luovain clusters annotations
patient_1_data$rna_louvain_clusters_ann <- case_match(
  patient_1_data$rna_louvain_clusters,
  c("0", "1", "2", "3") ~ "Tumor",
  "4" ~ "Fibroblast",
  "5" ~ "Macrophage",
  "6" ~ "T cell",
  "7" ~ "Fibroblast"
)
# Spatial plot with annotated louvain clusters colors
patient_1_plots <- c(patient_1_plots, generate_spatial_plots(
  patient_data = patient_1_data,
  cluster_var = louvain_cluster_var_ann,
  cluster_name = louvain_cluster_name_ann,
  color_lookup_table = known_clusters_colors))
# Generate the umap with the annotated clusters
patient_1_plots <- c(patient_1_plots, generate_umap(
  patient_1_data,
  louvain_cluster_var_ann,
  "umap_rna",
  cluster_name = louvain_cluster_name_ann,
  color_lookup_table = known_clusters_colors))

### ANNOTATED INSITUTYPE CLUSTERING ###
# Annotate the insitutype clusters
patient_1_data$ist_semisup_clusters_ann <- case_match(
  patient_1_data$ist_semisup_clusters,
  c("a", "b", "c", "d", "e", "f") ~ "Tumor",
  "g" ~ "Endothelial",
  .default = unname(patient_1_data$ist_semisup_clusters)
)
# Spatial plot with annotated insitutype clusters colors
patient_1_plots <- c(patient_1_plots, generate_spatial_plots(
  patient_data = patient_1_data,
  cluster_var = ist_cluster_var_ann,
  cluster_name = ist_cluster_name_ann,
  color_lookup_table = known_clusters_colors))
# Generate the umap with the annotated clusters
patient_1_plots <- c(patient_1_plots, generate_umap(
  patient_1_data,
  ist_cluster_var_ann,
  "umap_rna",
  cluster_name = ist_cluster_name_ann,
  color_lookup_table = known_clusters_colors))

# Saving and printing
patients_rna_data[[1]] <- patient_1_data
print(patient_1_plots)

# Cleanup
rm(this_patient_num)
```

```{r}
#| label: save-plots-patient-1
#| include: false
#| echo: false
#| eval: false

save_data(patient_1_plots, get_patient_dir_img("1"), images_ext)
```

### Patient 2

```{r}
#| label: analyze-patient-2

# Steps with all the data
patient_2_all_data <- extract_patient_data(breast_cancer_patients, "2")
patient_2_all_data <- analyze_proteins(patient_2_all_data)
patient_2_plots <- generate_proteins_plots(patient_2_all_data, "proteins")

# Red blood cells removed
patient_2_rbc_removed <- remove_clusters(patient_2_all_data, "protein_clusters", c(6))
patient_2_IST_semisup <- run_IST_semisup_extract_data(patient_2_rbc_removed, "Nanostring")
# Add cluster to the metadata
patient_2_rbc_removed$Insitutype_semisup_clusters <- patient_2_IST_semisup$clust

# RNA data only
patient_2_data <- extract_patient_rna_data(patient_2_rbc_removed, "Nanostring")
patient_2_data <- normalize_cluster_data(patient_2_data, "RNA")

# Annotations
patient_2_data$RNA_clusters_annotated <- case_match(
  patient_2_data$RNA_clusters,
  c("0", "1", "2") ~ "Tumor",
  "3" ~ "Fibroblast",
  "4" ~ "Macrophage",
  "5" ~ "Endothelial",
  "6" ~ "T cell"
)
patient_2_data$Insitutype_semisup_clusters_annotated <- case_match(
  patient_2_data$Insitutype_semisup_clusters,
  c("a", "b") ~ "Tumor",
  "c" ~ "Dendritic cell",
  c("d", "e") ~ "Fibroblast",
  .default = unname(patient_2_data$Insitutype_semisup_clusters)
)
# Colors for the Insitutype plot
Insitutype_color_lookup_table <- generate_colors_lookup_table(patient_2_data, "Insitutype_semisup_clusters_annotated", known_clusters_colors)
# Generate the annotated Insitutype plots
patient_2_plots <- c(patient_2_plots, generate_clustering_plots(patient_2_data, "Insitutype_semisup_clusters_annotated",
    cluster_assay = "RNA", 
    cluster_reduction = "umap_RNA",
    create_heatmap = FALSE,
    cluster_name = "Insitutype Semisupervised Clusters Annotated",
    color_lookup_table = Insitutype_color_lookup_table))
patient_2_plots <- c(patient_2_plots, generate_comparison_plots(patient_2_data))

# Generate plots
patient_2_plots <- c(patient_2_plots, generate_rna_plots(patient_2_data, "RNA", "RNA_clusters_annotated"))
patient_2_plots <- c(patient_2_plots, generate_IST_plots(patient_2_data, "RNA", patient_2_IST_semisup))
patient_2_plots <- c(patient_2_plots, generate_comparison_plots(patient_2_data))

# Cleanup and printing
patients_rna_data[[2]] <- patient_2_data
print(patient_2_plots)
```


```{r}
#| label: save-plots-patient-2
#| include: false
#| echo: false
#| eval: false

save_data(patient_2_plots, get_patient_dir_img("2"), images_ext)
```

### Patient 3

```{r}
#| label: analyze-patient-3

# Steps with all the data
patient_3_all_data <- extract_patient_data(breast_cancer_patients, "3")
patient_3_all_data <- analyze_proteins(patient_3_all_data)
patient_3_plots <- generate_proteins_plots(patient_3_all_data, "proteins")
patient_3_IST_semisup <- run_IST_semisup_extract_data(patient_3_all_data, "Nanostring")
# Add cluster to the metadata
patient_3_all_data$Insitutype_semisup_clusters <- patient_3_IST_semisup$clust

# RNA data only
patient_3_data <- extract_patient_rna_data(patient_3_all_data, "Nanostring")
patient_3_data <- normalize_cluster_data(patient_3_data, "RNA")

# Annotations
patient_3_data$RNA_clusters_annotated <- case_match(
  patient_3_data$RNA_clusters,
  c("0", "2", "3") ~ "Tumor",
  "1" ~ "Macrophage",
  c("4", "7") ~ "Fibroblast",
  "5" ~ "Fibroblast",
  "6" ~ "Endothelial"
)
patient_3_data$Insitutype_semisup_clusters_annotated <- case_match(
  patient_3_data$Insitutype_semisup_clusters,
  c("a", "c", "d", "e", "g") ~ "Tumor",
  c("b", "f") ~ "Fibroblast",
  .default = unname(patient_3_data$Insitutype_semisup_clusters)
)
# Generate plots
patient_3_plots <- c(patient_3_plots, generate_rna_plots(patient_3_data, "RNA", "RNA_clusters_annotated"))
patient_3_plots <- c(patient_3_plots, generate_IST_plots(patient_3_data, "RNA", patient_3_IST_semisup))
patient_3_plots <- c(patient_3_plots, generate_comparison_plots(patient_3_data))

# Cleanup and printing
patients_rna_data[[3]] <- patient_3_data
print(patient_3_plots)
```

```{r}
#| label: save-plots-patient-3
#| include: false
#| echo: false
#| eval: false

save_data(patient_3_plots, get_patient_dir_img("3"), images_ext)
```

### Patient 4

```{r}
#| label: analyze-patient-4

# Steps with all the data
patient_4_all_data <- extract_patient_data(breast_cancer_patients, "4")
patient_4_all_data <- analyze_proteins(patient_4_all_data)
patient_4_plots <- generate_proteins_plots(patient_4_all_data, "proteins")

# Red blood cells removed
patient_4_rbc_removed <- remove_clusters(patient_4_all_data, "protein_clusters", c(3))
patient_4_IST_semisup <- run_IST_semisup_extract_data(patient_4_rbc_removed, "Nanostring")
# Add cluster to the metadata
patient_4_rbc_removed$Insitutype_semisup_clusters <- patient_4_IST_semisup$clust

# RNA data only
patient_4_data <- extract_patient_rna_data(patient_4_rbc_removed, "Nanostring")
patient_4_data <- normalize_cluster_data(patient_4_data, "RNA")

# Annotations
patient_4_data$RNA_clusters_annotated <- case_match(
  patient_4_data$RNA_clusters,
  c("0", "1", "2", "3") ~ "Tumor",
  "4" ~ "Fibroblast",
  "5" ~ "Macrophage",
  "6" ~ "T cell"
)
patient_4_data$Insitutype_semisup_clusters_annotated <- case_match(
  patient_4_data$Insitutype_semisup_clusters,
  c("a", "c") ~ "Tumor",
  "b" ~ "Dendritic cell",
  c("d", "e") ~ "Fibroblast",
  .default = unname(patient_4_data$Insitutype_semisup_clusters)
)

# Generate plots
patient_4_plots <- c(patient_4_plots, generate_rna_plots(patient_4_data, "RNA", "RNA_clusters_annotated"))
patient_4_plots <- c(patient_4_plots, generate_IST_plots(patient_4_data, "RNA", patient_4_IST_semisup))
patient_4_plots <- c(patient_4_plots, generate_comparison_plots(patient_4_data))

# Cleanup and printing
patients_rna_data[[4]] <- patient_4_data
print(patient_4_plots)
```

```{r}
#| label: save-plots-patient-4
#| include: false
#| echo: false
#| eval: false

save_data(patient_4_plots, get_patient_dir_img("4"), images_ext)
```

### Patient 5

```{r}
#| label: analyze-patient-5

# Steps with all the data
patient_5_all_data <- extract_patient_data(breast_cancer_patients, "5")
patient_5_all_data <- analyze_proteins(patient_5_all_data)
patient_5_plots <- generate_proteins_plots(patient_5_all_data, "proteins")
patient_5_IST_semisup <- run_IST_semisup_extract_data(patient_5_all_data, "Nanostring")
# Add cluster to the metadata
patient_5_all_data$Insitutype_semisup_clusters <- patient_5_IST_semisup$clust

# RNA data only
patient_5_data <- extract_patient_rna_data(patient_5_all_data, "Nanostring")
patient_5_data <- normalize_cluster_data(patient_5_data, "RNA")

# Annotations
patient_5_data$RNA_clusters_annotated <- case_match(
  patient_5_data$RNA_clusters,
  c("0", "1") ~ "Tumor",
  c("2", "5") ~ "Dendritic cell",
  "3" ~ "Fibroblast",
  "4" ~ "Macrophage",
  "6" ~ "Endothelial",
  "7" ~ "T cell",
  "8" ~ "T cell",
)
patient_5_data$Insitutype_semisup_clusters_annotated <- case_match(
  patient_5_data$Insitutype_semisup_clusters,
  c("a", "c", "d", "g") ~ "Tumor",
  c("b", "e") ~ "T cell",
  "f" ~ "Fibroblast",
  .default = unname(patient_5_data$Insitutype_semisup_clusters)
)

# Generate plots
patient_5_plots <- c(patient_5_plots, generate_rna_plots(patient_5_data, "RNA", "RNA_clusters_annotated"))
patient_5_plots <- c(patient_5_plots, generate_IST_plots(patient_5_data, "RNA", patient_5_IST_semisup))
patient_5_plots <- c(patient_5_plots, generate_comparison_plots(patient_5_data))

# Cleanup and printing
patients_rna_data[[5]] <- patient_5_data
print(patient_5_plots)
```

```{r}
#| label: save-plots-patient-5
#| include: false
#| echo: false
#| eval: false

save_data(patient_5_plots, get_patient_dir_img("5"), images_ext)
```

### Patient 6

```{r}
#| label: analyze-patient-6

# Steps with all the data
patient_6_all_data <- extract_patient_data(breast_cancer_patients, "6")
patient_6_all_data <- analyze_proteins(patient_6_all_data)
patient_6_plots <- generate_proteins_plots(patient_6_all_data, "proteins")
patient_6_IST_semisup <- run_IST_semisup_extract_data(patient_6_all_data, "Nanostring")
# Add cluster to the metadata
patient_6_all_data$Insitutype_semisup_clusters <- patient_6_IST_semisup$clust

# RNA data only
patient_6_data <- extract_patient_rna_data(patient_6_all_data, "Nanostring")
patient_6_data <- normalize_cluster_data(patient_6_data, "RNA")

# Annotations
patient_6_data$RNA_clusters_annotated <- case_match(
  patient_6_data$RNA_clusters,
  c("0", "1", "2", "4") ~ "Tumor",
  "3" ~ "Fibroblast",
  "5" ~ "Macrophage",
)
patient_6_data$Insitutype_semisup_clusters_annotated <- case_match(
  patient_6_data$Insitutype_semisup_clusters,
  c("a", "b", "c", "d") ~ "Tumor",
  .default = unname(patient_6_data$Insitutype_semisup_clusters)
)

# Generate plots
patient_6_plots <- c(patient_6_plots, generate_rna_plots(patient_6_data, "RNA", "RNA_clusters_annotated"))
patient_6_plots <- c(patient_6_plots, generate_IST_plots(patient_6_data, "RNA", patient_6_IST_semisup))
patient_6_plots <- c(patient_6_plots, generate_comparison_plots(patient_6_data))

# Cleanup and printing
patients_rna_data[[6]] <- patient_6_data
print(patient_6_plots)
```

```{r}
#| label: save-plots-patient-6
#| include: false
#| echo: false
#| eval: false

save_data(patient_6_plots, get_patient_dir_img("6"), images_ext)
```

### Patient 7

```{r}
#| label: analyze-patient-7

# Steps with all the data
patient_7_all_data <- extract_patient_data(breast_cancer_patients, "7")
patient_7_all_data <- analyze_proteins(patient_7_all_data)
patient_7_plots <- generate_proteins_plots(patient_7_all_data, "proteins")

# Red blood cells removed
patient_7_rbc_removed <- remove_clusters(patient_7_all_data, "protein_clusters", c(7))
patient_7_IST_semisup <- run_IST_semisup_extract_data(patient_7_rbc_removed, "Nanostring")
# Add cluster to the metadata
patient_7_rbc_removed$Insitutype_semisup_clusters <- patient_7_IST_semisup$clust

# RNA data only
patient_7_data <- extract_patient_rna_data(patient_7_rbc_removed, "Nanostring")
patient_7_data <- normalize_cluster_data(patient_7_data, "RNA")

# Annotations
patient_7_data$RNA_clusters_annotated <- case_match(
  patient_7_data$RNA_clusters,
  c("0", "1", "2", "3") ~ "Tumor",
  "4" ~ "T cell",
  "5" ~ "Macrophage",
  "6" ~ "Macrophage",
  "7" ~ "Fibroblast",
  "8" ~ "Fibroblast"
)
patient_7_data$Insitutype_semisup_clusters_annotated <- case_match(
  patient_7_data$Insitutype_semisup_clusters,
  c("a", "b", "c", "d") ~ "Tumor",
  "e" ~ "T cell",
  .default = unname(patient_7_data$Insitutype_semisup_clusters)
)

# Generate plots
patient_7_plots <- c(patient_7_plots, generate_rna_plots(patient_7_data, "RNA", "RNA_clusters_annotated"))
patient_7_plots <- c(patient_7_plots, generate_IST_plots(patient_7_data, "RNA", patient_7_IST_semisup))
patient_7_plots <- c(patient_7_plots, generate_comparison_plots(patient_7_data))

# Cleanup and printing
patients_rna_data[[7]] <- patient_7_data
print(patient_7_plots)
```

::: {.content-hidden}
#### Save plots
:::

```{r}
#| label: save-plots-patient-7
#| include: false
#| echo: false
#| eval: false

save_data(patient_7_plots, get_patient_dir_img("7"), images_ext)
```

## Comparing patients

Compare the patients by plotting the proportion of cells according to the Insitutype and Louvain clustering. The data from the Akoya platform is also used as a benchmark.

```{r}
#| label: compare-patients

# Save plots comparing patients in this subfolder
compare_patients_subfolder <- here(images_dir, "Compare_patients")
compare_patients_to_save <- list()

# Create folder for the plots id it does not exist
if (!dir.exists(compare_patients_subfolder)) {
  dir.create(compare_patients_subfolder, recursive = TRUE)
}

# Merge all the Seurat objects together
combined_patients <- patients_rna_data[[1]]
combined_patients <- RenameCells(combined_patients, add.cell.id = "Patient_1")
for (i in 2:length(patients_rna_data)) {
  # Provide a unique identifier for each object
  seurat_obj <- RenameCells(patients_rna_data[[i]], add.cell.id = paste0("Patient_", i))
  combined_patients <- merge(combined_patients, y = seurat_obj, merge.data = TRUE)
}

patient_id_label <- "Patient ID"
per_cells_label <- "Percent of cells"
cell_types_label <- "Cell Types"

barplot_IST_ss_var = "Insitutype_semisup_clusters_annotated"
barplot_IST_ss_color_lookup_table <- generate_colors_lookup_table(combined_patients, barplot_IST_ss_var, known_clusters_colors)
# Plot a barplot comparing the InsitutypeID clusters of all patients
IST_ss_clusters_all_patients <- dittoBarPlot(
    object = combined_patients,
    var = barplot_IST_ss_var,
    group.by = "Patient.ID",
    color.panel = barplot_IST_ss_color_lookup_table) + 
  labs(title = "Proportion of cells according to Insitutype clustering",
       x = patient_id_label,
       y = per_cells_label,
       fill = cell_types_label) +
  scale_fill_manual(values = barplot_IST_ss_color_lookup_table) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  guides(fill = guide_legend(ncol = 2, byrow = TRUE))
compare_patients_to_save[["Insitutype_annotated_clusters_all_patients_barplot"]] <- IST_ss_clusters_all_patients

# Plot a barplot comparing the RNA clusters of all patients
barplot_RNA_ann_var = "RNA_clusters_annotated"
barplot_RNA_ann_color_lookup_table <- generate_colors_lookup_table(combined_patients, barplot_RNA_ann_var, known_clusters_colors)
RNA_ann_clusters_all_patients <- dittoBarPlot(
    object = combined_patients,
    var = barplot_RNA_ann_var,
    group.by = "Patient.ID",
    color.panel = barplot_RNA_ann_color_lookup_table) +
  labs(title = "Proportion of cells according to Louvain clustering",
       x = patient_id_label,
       y = per_cells_label,
       fill = cell_types_label) +
  scale_fill_manual(values = barplot_RNA_ann_color_lookup_table) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  guides(fill = guide_legend(byrow = TRUE))
compare_patients_to_save[["RNA_annotated_clusters_all_patients_barplot"]] <- RNA_ann_clusters_all_patients

# Pivot the table to print it with ggplot
akoya_by_patient_long <- akoya_by_patient %>%
  mutate(`T cell` = `T cell CD4` + `T cell CD8` + `T cell regulatory`) %>%
  select(-`T cell CD4`, -`T cell CD8`, -`T cell regulatory`) %>%
  mutate(`Unknown` = `Total Cells` - rowSums(select(., -`Patient ID`, -`Total Cells`))) %>%
  pivot_longer(cols = -c(`Patient ID`, `Total Cells`), 
               names_to = "Cells Type", 
               values_to = "Cells Quantity")

# Calculate the proportion of each value relative to "Total cells"
akoya_by_patient_long <- akoya_by_patient_long %>%
  mutate(`Cell Quantity Proportion` = `Cells Quantity` / `Total Cells`)

barplot_akoya_color_lookup_table <- generate_colors_lookup_table(akoya_by_patient_long, "Cells Type", known_clusters_colors)
akoya_all_patients <- ggplot(akoya_by_patient_long,
                             aes(x = `Patient ID`, y = `Cell Quantity Proportion`, fill = `Cells Type`)) +
  geom_bar(stat = "identity") +
  labs(title = "Proportion of cells according to Akoya data",
       x = patient_id_label,
       y = per_cells_label,
       fill = cell_types_label) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  scale_fill_manual(values = barplot_akoya_color_lookup_table)
compare_patients_to_save[["Akoya_all_patients_barplot"]] <- akoya_all_patients

# Extract and reshape data for Insitutype clustering
IST_ss_clusters_data <- as.data.frame(table(combined_patients$Patient.ID, combined_patients$Insitutype_semisup_clusters_annotated))
colnames(IST_ss_clusters_data) <- c("Patient ID", "Cells Type", "Cells Quantity")
cell_types_to_sum <- c("T cell", "T cell CD4", "T cell CD8", "T cell regulatory")

IST_ss_T_cells_data <- IST_ss_clusters_data %>%
  group_by(`Patient ID`) %>%
  summarise(
    `Cells Quantity` = sum(`Cells Quantity`[`Cells Type` %in% cell_types_to_sum]),
    `Cells Type` = "T cell"
  )

IST_ss_clusters_data <- IST_ss_clusters_data %>%
  filter(!`Cells Type` %in% cell_types_to_sum) %>%
  bind_rows(IST_ss_T_cells_data) %>%
  complete(`Patient ID`, `Cells Type`, fill = list(`Cells Quantity` = 0)) %>%
  group_by(`Patient ID`) %>%
  mutate(`Total Cells` = sum(`Cells Quantity`)) %>%
  ungroup() %>%
  mutate(`Cell Quantity Proportion` = `Cells Quantity` / `Total Cells`) %>%
  mutate(`Method` = "Insitutype")

# Extract and reshape data for Louvain clustering
RNA_ann_clusters_data <- as.data.frame(table(combined_patients$Patient.ID, combined_patients$RNA_clusters_annotated))
colnames(RNA_ann_clusters_data) <- c("Patient ID", "Cells Type", "Cells Quantity")
# Create a data frame with all Patient IDs and the missing cell type "B cell"
b_cell_data <- RNA_ann_clusters_data %>%
  distinct(`Patient ID`) %>%
  mutate(`Cells Type` = "B cell", `Cells Quantity` = 0)
RNA_ann_clusters_data <- RNA_ann_clusters_data %>%
  bind_rows(b_cell_data) %>%
  complete(`Patient ID`, `Cells Type`, fill = list(`Cells Quantity` = 0)) %>%
  group_by(`Patient ID`) %>%
  mutate(`Total Cells` = sum(`Cells Quantity`)) %>%
  ungroup() %>%
  mutate(`Cell Quantity Proportion` = `Cells Quantity` / `Total Cells`) %>%
  mutate(`Method` = "Louvain")

# Add Method column to Akoya data
akoya_by_patient_long$Method <- "Akoya"

# Combine all data into one data frame
combined_data <- IST_ss_clusters_data %>% full_join(RNA_ann_clusters_data) %>% full_join(akoya_by_patient_long)

combined_barplot_color_lookup_table <- generate_colors_lookup_table(combined_data, "Cells Type", known_clusters_colors)

# Define the order of cell types
cell_type_order <- c("Unknown", "Mast cell", "Plasma", "Plasmablast", "Neutrophil", "NK cell", "Monocyte", "Plasmacytoid dendritic cell", "Dendritic cell", "Endothelial", "Fibroblast", "B cell", "Macrophage", "T cell", "Tumor")
  # Replace with actual cell types in desired order

# Reorder the factor levels in the combined_data dataframe
combined_data$`Cells Type` <- factor(combined_data$`Cells Type`, levels = cell_type_order)

# Plot with all clustering methods and all patients stacked by clustering method
combined_stacked_barplot <- ggplot(
  combined_data,
  aes(x = `Patient ID`, 
      y = `Cell Quantity Proportion`, 
      fill = `Cells Type`)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_grid(rows = vars(`Method`), switch = "x") +
  labs(title = "Proportion of cells according to different clustering methods",
       x = patient_id_label,
       y = per_cells_label,
       fill = cell_types_label) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  scale_fill_manual(values = combined_barplot_color_lookup_table) +
  guides(fill = guide_legend(ncol = 2, byrow = TRUE))
# Save to compare_patients_to_save
compare_patients_to_save[["All_clustering_methods_all_patients_stacked_barplot"]] <- combined_stacked_barplot

# Plot with all clustering methods and all patients grouped by patient
combined_grouped_barplot <- ggplot(combined_data,aes(x = `Method`, 
                               y = `Cell Quantity Proportion`, 
                               fill = `Cells Type`)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Proportion of cells according to different clustering methods",
       x = patient_id_label,
       y = per_cells_label,
       fill = cell_types_label) +
  theme_minimal() +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  scale_fill_manual(values = combined_barplot_color_lookup_table) +
  guides(fill = guide_legend(ncol = 2, byrow = TRUE)) +
  facet_grid(~ `Patient ID`) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 5))
compare_patients_to_save[["All_clustering_methods_all_patients_grouped_barplot"]] <- combined_grouped_barplot

library("PairedData")

# Filter the combined_data_filtered to keep only the four patients
combined_data_filtered <- combined_data %>%
  filter(`Cells Type` %in% c("T cell", "Tumor", "Macrophage", "B cell"))

# Create all combinations of two methods
method_pairs <- combn(unique(combined_data_filtered$Method), 2, simplify = FALSE)

# Get unique cell types
cell_types <- unique(combined_data_filtered$`Cells Type`)

# Pre-calculate y-axis limits for each Cell Type
y_limits <- combined_data_filtered %>%
  group_by(`Cells Type`) %>%
  summarise(
    ymin = min(`Cell Quantity Proportion`, na.rm = TRUE),
    ymax = max(`Cell Quantity Proportion`, na.rm = TRUE)
  ) %>%
  # Create a named list where the key is the `Cells Type` and the value is c(ymin, ymax)
  rowwise() %>%
  mutate(limits = list(c(ymin, ymax))) %>%
  select(`Cells Type`, limits) %>%
  deframe()

# Create the scatterplot for each combination of cell type and method pair
# Define a fixed set of shapes (adjust as needed)
fixed_shapes <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  # Up to 10 unique shapes

# Create a mapping from Patient ID to shape
patient_shape_mapping <- setNames(fixed_shapes[1:length(unique(combined_data_filtered$`Patient ID`))], 
                                  unique(combined_data_filtered$`Patient ID`))

plot_list <- list()

for (cell_type in cell_types) {
  # Extract the y-axis limits for this cell type
  y_lim <- y_limits[[cell_type]]
  
  for (pair in method_pairs) {
  
    # Determine if the pair is not Insitutype vs Louvain
    if (!all(pair %in% c("Insitutype", "Louvain"))) {
      # Use all seven patients for Insitutype vs Louvain
      data_filtered <- combined_data_filtered %>%
        filter(`Patient ID` %in% c("3", "4", "5", "7"))
    } else {
      # Use all patients for the other pairs
      data_filtered <- combined_data_filtered
    }

    # Filter the data for the current pair and cell type
    data_filtered <- data_filtered %>%
      filter(Method %in% pair, `Cells Type` == cell_type) %>%
      mutate(Method = factor(Method, levels = pair),
             `Patient ID` = factor(`Patient ID`, levels = names(patient_shape_mapping)))
    
    # Extract the data for the first method
    m1_data <- data_filtered %>%
      filter(Method == pair[1]) %>%
      arrange(`Patient ID`) %>%  # Sort by Patient ID
      pull(`Cell Quantity Proportion`)

    # Extract the data for the first method
    m2_data <- data_filtered %>%
      filter(Method == pair[2]) %>%
      arrange(`Patient ID`) %>%  # Sort by Patient ID
      pull(`Cell Quantity Proportion`)

    # Perform Wilcoxon rank-sum test
    wilcox_test <- wilcox.test(m1_data, m2_data, paired = TRUE, alternative = "two.sided")
    
    # Extract the p-value
    p_value <- wilcox_test$p.value
      
    # Create the plot
    p <- data_filtered %>%
      ggplot(aes(x = Method, y = `Cell Quantity Proportion`, shape = `Patient ID`, group = `Patient ID`)) +
      geom_point() +
      geom_line() +
      labs(
        title = paste0(cell_type, ": ", pair[1], " vs ", pair[2]),
        subtitle = paste0("Wilcoxon p-value: ", signif(p_value, digits = 3)), # Add p-value to plot
        x = "Method",
        y = "Cell Proportion"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(size = 9),   # Adjust title size
        plot.subtitle = element_text(size = 9),   # Adjust title size
        axis.title.y = element_text(size = 8),  # Adjust y-axis label size
        axis.title.x = element_text(size = 8),  # Adjust x-axis label size
        axis.text.x = element_text(size = 7),   # Adjust x-axis text size
        axis.text.y = element_text(size = 7)    # Adjust y-axis text size
        #plot.margin = margin(10, 10, 10, 10)        # Add margin around plots
      ) +
      guides(shape = guide_legend(nrow = 1)) +
      scale_shape_manual(values = patient_shape_mapping) + # Use fixed shape mapping
      ylim(y_lim[1], y_lim[2]) # Apply the same y-axis limit for the cell type
    
    # Add the plot to the list
    plot_list[[paste(cell_type, pair[1], pair[2], sep = "_")]] <- p
  }
}
# Combine plots using ggpubr
Compare_clustering_methods_wilcoxon <- ggarrange(plotlist = plot_list, ncol = 3, nrow = 4, align = 'hv', common.legend = TRUE, legend="bottom")

compare_patients_to_save[["Compare_clustering_methods_wilcoxon"]] <- Compare_clustering_methods_wilcoxon

# Print all the plots
print(compare_patients_to_save)
```

::: {.content-hidden}
### Save plots
:::

```{r}
#| label: save-plots-compare-patients
#| include: false
#| echo: false
#| eval: false

save_data(compare_patients_to_save, compare_patients_subfolder, images_ext)
```
